package fi.wsnusbcollect.messages;

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'CtpReportDataMsg'
 * message type.
 */

public class CtpReportDataMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 29;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 237;

    /** Create a new CtpReportDataMsg of size 29. */
    public CtpReportDataMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new CtpReportDataMsg of the given data_length. */
    public CtpReportDataMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpReportDataMsg with the given data_length
     * and base offset.
     */
    public CtpReportDataMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpReportDataMsg using the given byte array
     * as backing store.
     */
    public CtpReportDataMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpReportDataMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public CtpReportDataMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpReportDataMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public CtpReportDataMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpReportDataMsg embedded in the given message
     * at the given base offset.
     */
    public CtpReportDataMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpReportDataMsg embedded in the given message
     * at the given base offset and length.
     */
    public CtpReportDataMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <CtpReportDataMsg> \n";
      try {
        s += "  [response.origin=0x"+Long.toHexString(get_response_origin())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [response.seqno=0x"+Long.toHexString(get_response_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [response.parent=0x"+Long.toHexString(get_response_parent())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [response.metric=0x"+Long.toHexString(get_response_metric())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [response.dataType=0x"+Long.toHexString(get_response_dataType())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [response.data=0x"+Long.toHexString(get_response_data())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [response.hopcount=0x"+Long.toHexString(get_response_hopcount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [response.sendCount=0x"+Long.toHexString(get_response_sendCount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [response.sendSuccessCount=0x"+Long.toHexString(get_response_sendSuccessCount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ctpDataHeader.options=0x"+Long.toHexString(get_ctpDataHeader_options())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ctpDataHeader.thl=0x"+Long.toHexString(get_ctpDataHeader_thl())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ctpDataHeader.etx=0x"+Long.toHexString(get_ctpDataHeader_etx())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ctpDataHeader.origin=0x"+Long.toHexString(get_ctpDataHeader_origin())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ctpDataHeader.originSeqNo=0x"+Long.toHexString(get_ctpDataHeader_originSeqNo())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ctpDataHeader.type=0x"+Long.toHexString(get_ctpDataHeader_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [amSource=0x"+Long.toHexString(get_amSource())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [rssi=0x"+Long.toHexString(get_rssi())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [flags=0x"+Long.toHexString(get_flags())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: response.origin
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'response.origin' is signed (false).
     */
    public static boolean isSigned_response_origin() {
        return false;
    }

    /**
     * Return whether the field 'response.origin' is an array (false).
     */
    public static boolean isArray_response_origin() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'response.origin'
     */
    public static int offset_response_origin() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'response.origin'
     */
    public static int offsetBits_response_origin() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'response.origin'
     */
    public int get_response_origin() {
        return (int)getUIntBEElement(offsetBits_response_origin(), 16);
    }

    /**
     * Set the value of the field 'response.origin'
     */
    public void set_response_origin(int value) {
        setUIntBEElement(offsetBits_response_origin(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'response.origin'
     */
    public static int size_response_origin() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'response.origin'
     */
    public static int sizeBits_response_origin() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: response.seqno
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'response.seqno' is signed (false).
     */
    public static boolean isSigned_response_seqno() {
        return false;
    }

    /**
     * Return whether the field 'response.seqno' is an array (false).
     */
    public static boolean isArray_response_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'response.seqno'
     */
    public static int offset_response_seqno() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'response.seqno'
     */
    public static int offsetBits_response_seqno() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'response.seqno'
     */
    public int get_response_seqno() {
        return (int)getUIntBEElement(offsetBits_response_seqno(), 16);
    }

    /**
     * Set the value of the field 'response.seqno'
     */
    public void set_response_seqno(int value) {
        setUIntBEElement(offsetBits_response_seqno(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'response.seqno'
     */
    public static int size_response_seqno() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'response.seqno'
     */
    public static int sizeBits_response_seqno() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: response.parent
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'response.parent' is signed (false).
     */
    public static boolean isSigned_response_parent() {
        return false;
    }

    /**
     * Return whether the field 'response.parent' is an array (false).
     */
    public static boolean isArray_response_parent() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'response.parent'
     */
    public static int offset_response_parent() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'response.parent'
     */
    public static int offsetBits_response_parent() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'response.parent'
     */
    public int get_response_parent() {
        return (int)getUIntBEElement(offsetBits_response_parent(), 16);
    }

    /**
     * Set the value of the field 'response.parent'
     */
    public void set_response_parent(int value) {
        setUIntBEElement(offsetBits_response_parent(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'response.parent'
     */
    public static int size_response_parent() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'response.parent'
     */
    public static int sizeBits_response_parent() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: response.metric
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'response.metric' is signed (false).
     */
    public static boolean isSigned_response_metric() {
        return false;
    }

    /**
     * Return whether the field 'response.metric' is an array (false).
     */
    public static boolean isArray_response_metric() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'response.metric'
     */
    public static int offset_response_metric() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'response.metric'
     */
    public static int offsetBits_response_metric() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'response.metric'
     */
    public int get_response_metric() {
        return (int)getUIntBEElement(offsetBits_response_metric(), 16);
    }

    /**
     * Set the value of the field 'response.metric'
     */
    public void set_response_metric(int value) {
        setUIntBEElement(offsetBits_response_metric(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'response.metric'
     */
    public static int size_response_metric() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'response.metric'
     */
    public static int sizeBits_response_metric() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: response.dataType
    //   Field type: short, unsigned
    //   Offset (bits): 64
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'response.dataType' is signed (false).
     */
    public static boolean isSigned_response_dataType() {
        return false;
    }

    /**
     * Return whether the field 'response.dataType' is an array (false).
     */
    public static boolean isArray_response_dataType() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'response.dataType'
     */
    public static int offset_response_dataType() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'response.dataType'
     */
    public static int offsetBits_response_dataType() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'response.dataType'
     */
    public short get_response_dataType() {
        return (short)getUIntBEElement(offsetBits_response_dataType(), 8);
    }

    /**
     * Set the value of the field 'response.dataType'
     */
    public void set_response_dataType(short value) {
        setUIntBEElement(offsetBits_response_dataType(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'response.dataType'
     */
    public static int size_response_dataType() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'response.dataType'
     */
    public static int sizeBits_response_dataType() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: response.data
    //   Field type: int, unsigned
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'response.data' is signed (false).
     */
    public static boolean isSigned_response_data() {
        return false;
    }

    /**
     * Return whether the field 'response.data' is an array (false).
     */
    public static boolean isArray_response_data() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'response.data'
     */
    public static int offset_response_data() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'response.data'
     */
    public static int offsetBits_response_data() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'response.data'
     */
    public int get_response_data() {
        return (int)getUIntBEElement(offsetBits_response_data(), 16);
    }

    /**
     * Set the value of the field 'response.data'
     */
    public void set_response_data(int value) {
        setUIntBEElement(offsetBits_response_data(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'response.data'
     */
    public static int size_response_data() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'response.data'
     */
    public static int sizeBits_response_data() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: response.hopcount
    //   Field type: short, unsigned
    //   Offset (bits): 88
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'response.hopcount' is signed (false).
     */
    public static boolean isSigned_response_hopcount() {
        return false;
    }

    /**
     * Return whether the field 'response.hopcount' is an array (false).
     */
    public static boolean isArray_response_hopcount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'response.hopcount'
     */
    public static int offset_response_hopcount() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'response.hopcount'
     */
    public static int offsetBits_response_hopcount() {
        return 88;
    }

    /**
     * Return the value (as a short) of the field 'response.hopcount'
     */
    public short get_response_hopcount() {
        return (short)getUIntBEElement(offsetBits_response_hopcount(), 8);
    }

    /**
     * Set the value of the field 'response.hopcount'
     */
    public void set_response_hopcount(short value) {
        setUIntBEElement(offsetBits_response_hopcount(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'response.hopcount'
     */
    public static int size_response_hopcount() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'response.hopcount'
     */
    public static int sizeBits_response_hopcount() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: response.sendCount
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'response.sendCount' is signed (false).
     */
    public static boolean isSigned_response_sendCount() {
        return false;
    }

    /**
     * Return whether the field 'response.sendCount' is an array (false).
     */
    public static boolean isArray_response_sendCount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'response.sendCount'
     */
    public static int offset_response_sendCount() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'response.sendCount'
     */
    public static int offsetBits_response_sendCount() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'response.sendCount'
     */
    public int get_response_sendCount() {
        return (int)getUIntBEElement(offsetBits_response_sendCount(), 16);
    }

    /**
     * Set the value of the field 'response.sendCount'
     */
    public void set_response_sendCount(int value) {
        setUIntBEElement(offsetBits_response_sendCount(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'response.sendCount'
     */
    public static int size_response_sendCount() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'response.sendCount'
     */
    public static int sizeBits_response_sendCount() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: response.sendSuccessCount
    //   Field type: int, unsigned
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'response.sendSuccessCount' is signed (false).
     */
    public static boolean isSigned_response_sendSuccessCount() {
        return false;
    }

    /**
     * Return whether the field 'response.sendSuccessCount' is an array (false).
     */
    public static boolean isArray_response_sendSuccessCount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'response.sendSuccessCount'
     */
    public static int offset_response_sendSuccessCount() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'response.sendSuccessCount'
     */
    public static int offsetBits_response_sendSuccessCount() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'response.sendSuccessCount'
     */
    public int get_response_sendSuccessCount() {
        return (int)getUIntBEElement(offsetBits_response_sendSuccessCount(), 16);
    }

    /**
     * Set the value of the field 'response.sendSuccessCount'
     */
    public void set_response_sendSuccessCount(int value) {
        setUIntBEElement(offsetBits_response_sendSuccessCount(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'response.sendSuccessCount'
     */
    public static int size_response_sendSuccessCount() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'response.sendSuccessCount'
     */
    public static int sizeBits_response_sendSuccessCount() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ctpDataHeader.options
    //   Field type: short, unsigned
    //   Offset (bits): 128
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ctpDataHeader.options' is signed (false).
     */
    public static boolean isSigned_ctpDataHeader_options() {
        return false;
    }

    /**
     * Return whether the field 'ctpDataHeader.options' is an array (false).
     */
    public static boolean isArray_ctpDataHeader_options() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ctpDataHeader.options'
     */
    public static int offset_ctpDataHeader_options() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ctpDataHeader.options'
     */
    public static int offsetBits_ctpDataHeader_options() {
        return 128;
    }

    /**
     * Return the value (as a short) of the field 'ctpDataHeader.options'
     */
    public short get_ctpDataHeader_options() {
        return (short)getUIntBEElement(offsetBits_ctpDataHeader_options(), 8);
    }

    /**
     * Set the value of the field 'ctpDataHeader.options'
     */
    public void set_ctpDataHeader_options(short value) {
        setUIntBEElement(offsetBits_ctpDataHeader_options(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'ctpDataHeader.options'
     */
    public static int size_ctpDataHeader_options() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ctpDataHeader.options'
     */
    public static int sizeBits_ctpDataHeader_options() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ctpDataHeader.thl
    //   Field type: short, unsigned
    //   Offset (bits): 136
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ctpDataHeader.thl' is signed (false).
     */
    public static boolean isSigned_ctpDataHeader_thl() {
        return false;
    }

    /**
     * Return whether the field 'ctpDataHeader.thl' is an array (false).
     */
    public static boolean isArray_ctpDataHeader_thl() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ctpDataHeader.thl'
     */
    public static int offset_ctpDataHeader_thl() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ctpDataHeader.thl'
     */
    public static int offsetBits_ctpDataHeader_thl() {
        return 136;
    }

    /**
     * Return the value (as a short) of the field 'ctpDataHeader.thl'
     */
    public short get_ctpDataHeader_thl() {
        return (short)getUIntBEElement(offsetBits_ctpDataHeader_thl(), 8);
    }

    /**
     * Set the value of the field 'ctpDataHeader.thl'
     */
    public void set_ctpDataHeader_thl(short value) {
        setUIntBEElement(offsetBits_ctpDataHeader_thl(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'ctpDataHeader.thl'
     */
    public static int size_ctpDataHeader_thl() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ctpDataHeader.thl'
     */
    public static int sizeBits_ctpDataHeader_thl() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ctpDataHeader.etx
    //   Field type: int, unsigned
    //   Offset (bits): 144
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ctpDataHeader.etx' is signed (false).
     */
    public static boolean isSigned_ctpDataHeader_etx() {
        return false;
    }

    /**
     * Return whether the field 'ctpDataHeader.etx' is an array (false).
     */
    public static boolean isArray_ctpDataHeader_etx() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ctpDataHeader.etx'
     */
    public static int offset_ctpDataHeader_etx() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ctpDataHeader.etx'
     */
    public static int offsetBits_ctpDataHeader_etx() {
        return 144;
    }

    /**
     * Return the value (as a int) of the field 'ctpDataHeader.etx'
     */
    public int get_ctpDataHeader_etx() {
        return (int)getUIntBEElement(offsetBits_ctpDataHeader_etx(), 16);
    }

    /**
     * Set the value of the field 'ctpDataHeader.etx'
     */
    public void set_ctpDataHeader_etx(int value) {
        setUIntBEElement(offsetBits_ctpDataHeader_etx(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'ctpDataHeader.etx'
     */
    public static int size_ctpDataHeader_etx() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ctpDataHeader.etx'
     */
    public static int sizeBits_ctpDataHeader_etx() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ctpDataHeader.origin
    //   Field type: int, unsigned
    //   Offset (bits): 160
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ctpDataHeader.origin' is signed (false).
     */
    public static boolean isSigned_ctpDataHeader_origin() {
        return false;
    }

    /**
     * Return whether the field 'ctpDataHeader.origin' is an array (false).
     */
    public static boolean isArray_ctpDataHeader_origin() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ctpDataHeader.origin'
     */
    public static int offset_ctpDataHeader_origin() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ctpDataHeader.origin'
     */
    public static int offsetBits_ctpDataHeader_origin() {
        return 160;
    }

    /**
     * Return the value (as a int) of the field 'ctpDataHeader.origin'
     */
    public int get_ctpDataHeader_origin() {
        return (int)getUIntBEElement(offsetBits_ctpDataHeader_origin(), 16);
    }

    /**
     * Set the value of the field 'ctpDataHeader.origin'
     */
    public void set_ctpDataHeader_origin(int value) {
        setUIntBEElement(offsetBits_ctpDataHeader_origin(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'ctpDataHeader.origin'
     */
    public static int size_ctpDataHeader_origin() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ctpDataHeader.origin'
     */
    public static int sizeBits_ctpDataHeader_origin() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ctpDataHeader.originSeqNo
    //   Field type: short, unsigned
    //   Offset (bits): 176
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ctpDataHeader.originSeqNo' is signed (false).
     */
    public static boolean isSigned_ctpDataHeader_originSeqNo() {
        return false;
    }

    /**
     * Return whether the field 'ctpDataHeader.originSeqNo' is an array (false).
     */
    public static boolean isArray_ctpDataHeader_originSeqNo() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ctpDataHeader.originSeqNo'
     */
    public static int offset_ctpDataHeader_originSeqNo() {
        return (176 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ctpDataHeader.originSeqNo'
     */
    public static int offsetBits_ctpDataHeader_originSeqNo() {
        return 176;
    }

    /**
     * Return the value (as a short) of the field 'ctpDataHeader.originSeqNo'
     */
    public short get_ctpDataHeader_originSeqNo() {
        return (short)getUIntBEElement(offsetBits_ctpDataHeader_originSeqNo(), 8);
    }

    /**
     * Set the value of the field 'ctpDataHeader.originSeqNo'
     */
    public void set_ctpDataHeader_originSeqNo(short value) {
        setUIntBEElement(offsetBits_ctpDataHeader_originSeqNo(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'ctpDataHeader.originSeqNo'
     */
    public static int size_ctpDataHeader_originSeqNo() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ctpDataHeader.originSeqNo'
     */
    public static int sizeBits_ctpDataHeader_originSeqNo() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ctpDataHeader.type
    //   Field type: short, unsigned
    //   Offset (bits): 184
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ctpDataHeader.type' is signed (false).
     */
    public static boolean isSigned_ctpDataHeader_type() {
        return false;
    }

    /**
     * Return whether the field 'ctpDataHeader.type' is an array (false).
     */
    public static boolean isArray_ctpDataHeader_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ctpDataHeader.type'
     */
    public static int offset_ctpDataHeader_type() {
        return (184 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ctpDataHeader.type'
     */
    public static int offsetBits_ctpDataHeader_type() {
        return 184;
    }

    /**
     * Return the value (as a short) of the field 'ctpDataHeader.type'
     */
    public short get_ctpDataHeader_type() {
        return (short)getUIntBEElement(offsetBits_ctpDataHeader_type(), 8);
    }

    /**
     * Set the value of the field 'ctpDataHeader.type'
     */
    public void set_ctpDataHeader_type(short value) {
        setUIntBEElement(offsetBits_ctpDataHeader_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'ctpDataHeader.type'
     */
    public static int size_ctpDataHeader_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ctpDataHeader.type'
     */
    public static int sizeBits_ctpDataHeader_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ctpDataHeader.data
    //   Field type: short[], unsigned
    //   Offset (bits): 192
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ctpDataHeader.data' is signed (false).
     */
    public static boolean isSigned_ctpDataHeader_data() {
        return false;
    }

    /**
     * Return whether the field 'ctpDataHeader.data' is an array (true).
     */
    public static boolean isArray_ctpDataHeader_data() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'ctpDataHeader.data'
     */
    public static int offset_ctpDataHeader_data(int index1) {
        int offset = 192;
        if (index1 < 0) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ctpDataHeader.data'
     */
    public static int offsetBits_ctpDataHeader_data(int index1) {
        int offset = 192;
        if (index1 < 0) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'ctpDataHeader.data' as a short[]
     */
    public short[] get_ctpDataHeader_data() {
        throw new IllegalArgumentException("Cannot get field as array - unknown size");
    }

    /**
     * Set the contents of the array 'ctpDataHeader.data' from the given short[]
     */
    public void set_ctpDataHeader_data(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_ctpDataHeader_data(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'ctpDataHeader.data'
     */
    public short getElement_ctpDataHeader_data(int index1) {
        return (short)getUIntBEElement(offsetBits_ctpDataHeader_data(index1), 8);
    }

    /**
     * Set an element of the array 'ctpDataHeader.data'
     */
    public void setElement_ctpDataHeader_data(int index1, short value) {
        setUIntBEElement(offsetBits_ctpDataHeader_data(index1), 8, value);
    }

    /**
     * Return the size, in bytes, of each element of the array 'ctpDataHeader.data'
     */
    public static int elementSize_ctpDataHeader_data() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'ctpDataHeader.data'
     */
    public static int elementSizeBits_ctpDataHeader_data() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'ctpDataHeader.data'
     */
    public static int numDimensions_ctpDataHeader_data() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'ctpDataHeader.data'
     * for the given dimension.
     */
    public static int numElements_ctpDataHeader_data(int dimension) {
      int array_dims[] = { 0,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'ctpDataHeader.data' with a String
     */
    public void setString_ctpDataHeader_data(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_ctpDataHeader_data(i, (short)s.charAt(i));
         }
         setElement_ctpDataHeader_data(i, (short)0); //null terminate
    }

    /**
     * Read the array 'ctpDataHeader.data' as a String
     */
    public String getString_ctpDataHeader_data() { 
         char carr[] = new char[net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_ctpDataHeader_data(i) == (char)0) break;
             carr[i] = (char)getElement_ctpDataHeader_data(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: amSource
    //   Field type: int, unsigned
    //   Offset (bits): 192
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'amSource' is signed (false).
     */
    public static boolean isSigned_amSource() {
        return false;
    }

    /**
     * Return whether the field 'amSource' is an array (false).
     */
    public static boolean isArray_amSource() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'amSource'
     */
    public static int offset_amSource() {
        return (192 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'amSource'
     */
    public static int offsetBits_amSource() {
        return 192;
    }

    /**
     * Return the value (as a int) of the field 'amSource'
     */
    public int get_amSource() {
        return (int)getUIntBEElement(offsetBits_amSource(), 16);
    }

    /**
     * Set the value of the field 'amSource'
     */
    public void set_amSource(int value) {
        setUIntBEElement(offsetBits_amSource(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'amSource'
     */
    public static int size_amSource() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'amSource'
     */
    public static int sizeBits_amSource() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: rssi
    //   Field type: int, unsigned
    //   Offset (bits): 208
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'rssi' is signed (false).
     */
    public static boolean isSigned_rssi() {
        return false;
    }

    /**
     * Return whether the field 'rssi' is an array (false).
     */
    public static boolean isArray_rssi() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'rssi'
     */
    public static int offset_rssi() {
        return (208 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'rssi'
     */
    public static int offsetBits_rssi() {
        return 208;
    }

    /**
     * Return the value (as a int) of the field 'rssi'
     */
    public int get_rssi() {
        return (int)getUIntBEElement(offsetBits_rssi(), 16);
    }

    /**
     * Set the value of the field 'rssi'
     */
    public void set_rssi(int value) {
        setUIntBEElement(offsetBits_rssi(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'rssi'
     */
    public static int size_rssi() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'rssi'
     */
    public static int sizeBits_rssi() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: flags
    //   Field type: short, unsigned
    //   Offset (bits): 224
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'flags' is signed (false).
     */
    public static boolean isSigned_flags() {
        return false;
    }

    /**
     * Return whether the field 'flags' is an array (false).
     */
    public static boolean isArray_flags() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'flags'
     */
    public static int offset_flags() {
        return (224 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'flags'
     */
    public static int offsetBits_flags() {
        return 224;
    }

    /**
     * Return the value (as a short) of the field 'flags'
     */
    public short get_flags() {
        return (short)getUIntBEElement(offsetBits_flags(), 8);
    }

    /**
     * Set the value of the field 'flags'
     */
    public void set_flags(short value) {
        setUIntBEElement(offsetBits_flags(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'flags'
     */
    public static int size_flags() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'flags'
     */
    public static int sizeBits_flags() {
        return 8;
    }

}
