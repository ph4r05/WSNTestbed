package fi.wsnusbcollect.messages;

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'CtpReportDataMsg'
 * message type.
 */

public class CtpReportDataMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 33;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 237;

    /** Create a new CtpReportDataMsg of size 33. */
    public CtpReportDataMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new CtpReportDataMsg of the given data_length. */
    public CtpReportDataMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpReportDataMsg with the given data_length
     * and base offset.
     */
    public CtpReportDataMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpReportDataMsg using the given byte array
     * as backing store.
     */
    public CtpReportDataMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpReportDataMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public CtpReportDataMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpReportDataMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public CtpReportDataMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpReportDataMsg embedded in the given message
     * at the given base offset.
     */
    public CtpReportDataMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpReportDataMsg embedded in the given message
     * at the given base offset and length.
     */
    public CtpReportDataMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <CtpReportDataMsg> \n";
      try {
        s += "  [response.origin=0x"+Long.toHexString(get_response_origin())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [response.seqno=0x"+Long.toHexString(get_response_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [response.parent=0x"+Long.toHexString(get_response_parent())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [response.metric=0x"+Long.toHexString(get_response_metric())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [response.dataType=0x"+Long.toHexString(get_response_dataType())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [response.data=0x"+Long.toHexString(get_response_data())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [localTime32khz=0x"+Long.toHexString(get_localTime32khz())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [amSource=0x"+Long.toHexString(get_amSource())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [timestamp32khz=0x"+Long.toHexString(get_timestamp32khz())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.recv.ctpDataHeader.options=0x"+Long.toHexString(get_data_recv_ctpDataHeader_options())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.recv.ctpDataHeader.thl=0x"+Long.toHexString(get_data_recv_ctpDataHeader_thl())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.recv.ctpDataHeader.etx=0x"+Long.toHexString(get_data_recv_ctpDataHeader_etx())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.recv.ctpDataHeader.origin=0x"+Long.toHexString(get_data_recv_ctpDataHeader_origin())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.recv.ctpDataHeader.originSeqNo=0x"+Long.toHexString(get_data_recv_ctpDataHeader_originSeqNo())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.recv.ctpDataHeader.type=0x"+Long.toHexString(get_data_recv_ctpDataHeader_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.recv.rssi=0x"+Long.toHexString(get_data_recv_rssi())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.sent.ccaWaitTime=0x"+Long.toHexString(get_data_sent_ccaWaitTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.sent.ccaWaitRounds=0x"+Long.toHexString(get_data_sent_ccaWaitRounds())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.sent.fwdRetryCount=0x"+Long.toHexString(get_data_sent_fwdRetryCount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.sent.client=0x"+Long.toHexString(get_data_sent_client())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.sent.dest=0x"+Long.toHexString(get_data_sent_dest())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.sent.acked=0x"+Long.toHexString(get_data_sent_acked())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [flags=0x"+Long.toHexString(get_flags())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: response.origin
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'response.origin' is signed (false).
     */
    public static boolean isSigned_response_origin() {
        return false;
    }

    /**
     * Return whether the field 'response.origin' is an array (false).
     */
    public static boolean isArray_response_origin() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'response.origin'
     */
    public static int offset_response_origin() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'response.origin'
     */
    public static int offsetBits_response_origin() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'response.origin'
     */
    public int get_response_origin() {
        return (int)getUIntBEElement(offsetBits_response_origin(), 16);
    }

    /**
     * Set the value of the field 'response.origin'
     */
    public void set_response_origin(int value) {
        setUIntBEElement(offsetBits_response_origin(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'response.origin'
     */
    public static int size_response_origin() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'response.origin'
     */
    public static int sizeBits_response_origin() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: response.seqno
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'response.seqno' is signed (false).
     */
    public static boolean isSigned_response_seqno() {
        return false;
    }

    /**
     * Return whether the field 'response.seqno' is an array (false).
     */
    public static boolean isArray_response_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'response.seqno'
     */
    public static int offset_response_seqno() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'response.seqno'
     */
    public static int offsetBits_response_seqno() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'response.seqno'
     */
    public int get_response_seqno() {
        return (int)getUIntBEElement(offsetBits_response_seqno(), 16);
    }

    /**
     * Set the value of the field 'response.seqno'
     */
    public void set_response_seqno(int value) {
        setUIntBEElement(offsetBits_response_seqno(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'response.seqno'
     */
    public static int size_response_seqno() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'response.seqno'
     */
    public static int sizeBits_response_seqno() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: response.parent
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'response.parent' is signed (false).
     */
    public static boolean isSigned_response_parent() {
        return false;
    }

    /**
     * Return whether the field 'response.parent' is an array (false).
     */
    public static boolean isArray_response_parent() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'response.parent'
     */
    public static int offset_response_parent() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'response.parent'
     */
    public static int offsetBits_response_parent() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'response.parent'
     */
    public int get_response_parent() {
        return (int)getUIntBEElement(offsetBits_response_parent(), 16);
    }

    /**
     * Set the value of the field 'response.parent'
     */
    public void set_response_parent(int value) {
        setUIntBEElement(offsetBits_response_parent(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'response.parent'
     */
    public static int size_response_parent() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'response.parent'
     */
    public static int sizeBits_response_parent() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: response.metric
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'response.metric' is signed (false).
     */
    public static boolean isSigned_response_metric() {
        return false;
    }

    /**
     * Return whether the field 'response.metric' is an array (false).
     */
    public static boolean isArray_response_metric() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'response.metric'
     */
    public static int offset_response_metric() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'response.metric'
     */
    public static int offsetBits_response_metric() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'response.metric'
     */
    public int get_response_metric() {
        return (int)getUIntBEElement(offsetBits_response_metric(), 16);
    }

    /**
     * Set the value of the field 'response.metric'
     */
    public void set_response_metric(int value) {
        setUIntBEElement(offsetBits_response_metric(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'response.metric'
     */
    public static int size_response_metric() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'response.metric'
     */
    public static int sizeBits_response_metric() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: response.dataType
    //   Field type: short, unsigned
    //   Offset (bits): 64
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'response.dataType' is signed (false).
     */
    public static boolean isSigned_response_dataType() {
        return false;
    }

    /**
     * Return whether the field 'response.dataType' is an array (false).
     */
    public static boolean isArray_response_dataType() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'response.dataType'
     */
    public static int offset_response_dataType() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'response.dataType'
     */
    public static int offsetBits_response_dataType() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'response.dataType'
     */
    public short get_response_dataType() {
        return (short)getUIntBEElement(offsetBits_response_dataType(), 8);
    }

    /**
     * Set the value of the field 'response.dataType'
     */
    public void set_response_dataType(short value) {
        setUIntBEElement(offsetBits_response_dataType(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'response.dataType'
     */
    public static int size_response_dataType() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'response.dataType'
     */
    public static int sizeBits_response_dataType() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: response.data
    //   Field type: int, unsigned
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'response.data' is signed (false).
     */
    public static boolean isSigned_response_data() {
        return false;
    }

    /**
     * Return whether the field 'response.data' is an array (false).
     */
    public static boolean isArray_response_data() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'response.data'
     */
    public static int offset_response_data() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'response.data'
     */
    public static int offsetBits_response_data() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'response.data'
     */
    public int get_response_data() {
        return (int)getUIntBEElement(offsetBits_response_data(), 16);
    }

    /**
     * Set the value of the field 'response.data'
     */
    public void set_response_data(int value) {
        setUIntBEElement(offsetBits_response_data(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'response.data'
     */
    public static int size_response_data() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'response.data'
     */
    public static int sizeBits_response_data() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: localTime32khz
    //   Field type: long, unsigned
    //   Offset (bits): 88
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'localTime32khz' is signed (false).
     */
    public static boolean isSigned_localTime32khz() {
        return false;
    }

    /**
     * Return whether the field 'localTime32khz' is an array (false).
     */
    public static boolean isArray_localTime32khz() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'localTime32khz'
     */
    public static int offset_localTime32khz() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'localTime32khz'
     */
    public static int offsetBits_localTime32khz() {
        return 88;
    }

    /**
     * Return the value (as a long) of the field 'localTime32khz'
     */
    public long get_localTime32khz() {
        return (long)getUIntBEElement(offsetBits_localTime32khz(), 32);
    }

    /**
     * Set the value of the field 'localTime32khz'
     */
    public void set_localTime32khz(long value) {
        setUIntBEElement(offsetBits_localTime32khz(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'localTime32khz'
     */
    public static int size_localTime32khz() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'localTime32khz'
     */
    public static int sizeBits_localTime32khz() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: amSource
    //   Field type: int, unsigned
    //   Offset (bits): 120
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'amSource' is signed (false).
     */
    public static boolean isSigned_amSource() {
        return false;
    }

    /**
     * Return whether the field 'amSource' is an array (false).
     */
    public static boolean isArray_amSource() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'amSource'
     */
    public static int offset_amSource() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'amSource'
     */
    public static int offsetBits_amSource() {
        return 120;
    }

    /**
     * Return the value (as a int) of the field 'amSource'
     */
    public int get_amSource() {
        return (int)getUIntBEElement(offsetBits_amSource(), 16);
    }

    /**
     * Set the value of the field 'amSource'
     */
    public void set_amSource(int value) {
        setUIntBEElement(offsetBits_amSource(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'amSource'
     */
    public static int size_amSource() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'amSource'
     */
    public static int sizeBits_amSource() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: timestamp32khz
    //   Field type: long, unsigned
    //   Offset (bits): 136
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'timestamp32khz' is signed (false).
     */
    public static boolean isSigned_timestamp32khz() {
        return false;
    }

    /**
     * Return whether the field 'timestamp32khz' is an array (false).
     */
    public static boolean isArray_timestamp32khz() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'timestamp32khz'
     */
    public static int offset_timestamp32khz() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'timestamp32khz'
     */
    public static int offsetBits_timestamp32khz() {
        return 136;
    }

    /**
     * Return the value (as a long) of the field 'timestamp32khz'
     */
    public long get_timestamp32khz() {
        return (long)getUIntBEElement(offsetBits_timestamp32khz(), 32);
    }

    /**
     * Set the value of the field 'timestamp32khz'
     */
    public void set_timestamp32khz(long value) {
        setUIntBEElement(offsetBits_timestamp32khz(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'timestamp32khz'
     */
    public static int size_timestamp32khz() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'timestamp32khz'
     */
    public static int sizeBits_timestamp32khz() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.recv.ctpDataHeader.options
    //   Field type: short, unsigned
    //   Offset (bits): 168
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.recv.ctpDataHeader.options' is signed (false).
     */
    public static boolean isSigned_data_recv_ctpDataHeader_options() {
        return false;
    }

    /**
     * Return whether the field 'data.recv.ctpDataHeader.options' is an array (false).
     */
    public static boolean isArray_data_recv_ctpDataHeader_options() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.recv.ctpDataHeader.options'
     */
    public static int offset_data_recv_ctpDataHeader_options() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.recv.ctpDataHeader.options'
     */
    public static int offsetBits_data_recv_ctpDataHeader_options() {
        return 168;
    }

    /**
     * Return the value (as a short) of the field 'data.recv.ctpDataHeader.options'
     */
    public short get_data_recv_ctpDataHeader_options() {
        return (short)getUIntBEElement(offsetBits_data_recv_ctpDataHeader_options(), 8);
    }

    /**
     * Set the value of the field 'data.recv.ctpDataHeader.options'
     */
    public void set_data_recv_ctpDataHeader_options(short value) {
        setUIntBEElement(offsetBits_data_recv_ctpDataHeader_options(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.recv.ctpDataHeader.options'
     */
    public static int size_data_recv_ctpDataHeader_options() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.recv.ctpDataHeader.options'
     */
    public static int sizeBits_data_recv_ctpDataHeader_options() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.recv.ctpDataHeader.thl
    //   Field type: short, unsigned
    //   Offset (bits): 176
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.recv.ctpDataHeader.thl' is signed (false).
     */
    public static boolean isSigned_data_recv_ctpDataHeader_thl() {
        return false;
    }

    /**
     * Return whether the field 'data.recv.ctpDataHeader.thl' is an array (false).
     */
    public static boolean isArray_data_recv_ctpDataHeader_thl() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.recv.ctpDataHeader.thl'
     */
    public static int offset_data_recv_ctpDataHeader_thl() {
        return (176 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.recv.ctpDataHeader.thl'
     */
    public static int offsetBits_data_recv_ctpDataHeader_thl() {
        return 176;
    }

    /**
     * Return the value (as a short) of the field 'data.recv.ctpDataHeader.thl'
     */
    public short get_data_recv_ctpDataHeader_thl() {
        return (short)getUIntBEElement(offsetBits_data_recv_ctpDataHeader_thl(), 8);
    }

    /**
     * Set the value of the field 'data.recv.ctpDataHeader.thl'
     */
    public void set_data_recv_ctpDataHeader_thl(short value) {
        setUIntBEElement(offsetBits_data_recv_ctpDataHeader_thl(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.recv.ctpDataHeader.thl'
     */
    public static int size_data_recv_ctpDataHeader_thl() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.recv.ctpDataHeader.thl'
     */
    public static int sizeBits_data_recv_ctpDataHeader_thl() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.recv.ctpDataHeader.etx
    //   Field type: int, unsigned
    //   Offset (bits): 184
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.recv.ctpDataHeader.etx' is signed (false).
     */
    public static boolean isSigned_data_recv_ctpDataHeader_etx() {
        return false;
    }

    /**
     * Return whether the field 'data.recv.ctpDataHeader.etx' is an array (false).
     */
    public static boolean isArray_data_recv_ctpDataHeader_etx() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.recv.ctpDataHeader.etx'
     */
    public static int offset_data_recv_ctpDataHeader_etx() {
        return (184 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.recv.ctpDataHeader.etx'
     */
    public static int offsetBits_data_recv_ctpDataHeader_etx() {
        return 184;
    }

    /**
     * Return the value (as a int) of the field 'data.recv.ctpDataHeader.etx'
     */
    public int get_data_recv_ctpDataHeader_etx() {
        return (int)getUIntBEElement(offsetBits_data_recv_ctpDataHeader_etx(), 16);
    }

    /**
     * Set the value of the field 'data.recv.ctpDataHeader.etx'
     */
    public void set_data_recv_ctpDataHeader_etx(int value) {
        setUIntBEElement(offsetBits_data_recv_ctpDataHeader_etx(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.recv.ctpDataHeader.etx'
     */
    public static int size_data_recv_ctpDataHeader_etx() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.recv.ctpDataHeader.etx'
     */
    public static int sizeBits_data_recv_ctpDataHeader_etx() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.recv.ctpDataHeader.origin
    //   Field type: int, unsigned
    //   Offset (bits): 200
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.recv.ctpDataHeader.origin' is signed (false).
     */
    public static boolean isSigned_data_recv_ctpDataHeader_origin() {
        return false;
    }

    /**
     * Return whether the field 'data.recv.ctpDataHeader.origin' is an array (false).
     */
    public static boolean isArray_data_recv_ctpDataHeader_origin() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.recv.ctpDataHeader.origin'
     */
    public static int offset_data_recv_ctpDataHeader_origin() {
        return (200 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.recv.ctpDataHeader.origin'
     */
    public static int offsetBits_data_recv_ctpDataHeader_origin() {
        return 200;
    }

    /**
     * Return the value (as a int) of the field 'data.recv.ctpDataHeader.origin'
     */
    public int get_data_recv_ctpDataHeader_origin() {
        return (int)getUIntBEElement(offsetBits_data_recv_ctpDataHeader_origin(), 16);
    }

    /**
     * Set the value of the field 'data.recv.ctpDataHeader.origin'
     */
    public void set_data_recv_ctpDataHeader_origin(int value) {
        setUIntBEElement(offsetBits_data_recv_ctpDataHeader_origin(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.recv.ctpDataHeader.origin'
     */
    public static int size_data_recv_ctpDataHeader_origin() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.recv.ctpDataHeader.origin'
     */
    public static int sizeBits_data_recv_ctpDataHeader_origin() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.recv.ctpDataHeader.originSeqNo
    //   Field type: short, unsigned
    //   Offset (bits): 216
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.recv.ctpDataHeader.originSeqNo' is signed (false).
     */
    public static boolean isSigned_data_recv_ctpDataHeader_originSeqNo() {
        return false;
    }

    /**
     * Return whether the field 'data.recv.ctpDataHeader.originSeqNo' is an array (false).
     */
    public static boolean isArray_data_recv_ctpDataHeader_originSeqNo() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.recv.ctpDataHeader.originSeqNo'
     */
    public static int offset_data_recv_ctpDataHeader_originSeqNo() {
        return (216 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.recv.ctpDataHeader.originSeqNo'
     */
    public static int offsetBits_data_recv_ctpDataHeader_originSeqNo() {
        return 216;
    }

    /**
     * Return the value (as a short) of the field 'data.recv.ctpDataHeader.originSeqNo'
     */
    public short get_data_recv_ctpDataHeader_originSeqNo() {
        return (short)getUIntBEElement(offsetBits_data_recv_ctpDataHeader_originSeqNo(), 8);
    }

    /**
     * Set the value of the field 'data.recv.ctpDataHeader.originSeqNo'
     */
    public void set_data_recv_ctpDataHeader_originSeqNo(short value) {
        setUIntBEElement(offsetBits_data_recv_ctpDataHeader_originSeqNo(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.recv.ctpDataHeader.originSeqNo'
     */
    public static int size_data_recv_ctpDataHeader_originSeqNo() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.recv.ctpDataHeader.originSeqNo'
     */
    public static int sizeBits_data_recv_ctpDataHeader_originSeqNo() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.recv.ctpDataHeader.type
    //   Field type: short, unsigned
    //   Offset (bits): 224
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.recv.ctpDataHeader.type' is signed (false).
     */
    public static boolean isSigned_data_recv_ctpDataHeader_type() {
        return false;
    }

    /**
     * Return whether the field 'data.recv.ctpDataHeader.type' is an array (false).
     */
    public static boolean isArray_data_recv_ctpDataHeader_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.recv.ctpDataHeader.type'
     */
    public static int offset_data_recv_ctpDataHeader_type() {
        return (224 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.recv.ctpDataHeader.type'
     */
    public static int offsetBits_data_recv_ctpDataHeader_type() {
        return 224;
    }

    /**
     * Return the value (as a short) of the field 'data.recv.ctpDataHeader.type'
     */
    public short get_data_recv_ctpDataHeader_type() {
        return (short)getUIntBEElement(offsetBits_data_recv_ctpDataHeader_type(), 8);
    }

    /**
     * Set the value of the field 'data.recv.ctpDataHeader.type'
     */
    public void set_data_recv_ctpDataHeader_type(short value) {
        setUIntBEElement(offsetBits_data_recv_ctpDataHeader_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.recv.ctpDataHeader.type'
     */
    public static int size_data_recv_ctpDataHeader_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.recv.ctpDataHeader.type'
     */
    public static int sizeBits_data_recv_ctpDataHeader_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.recv.ctpDataHeader.data
    //   Field type: short[], unsigned
    //   Offset (bits): 232
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.recv.ctpDataHeader.data' is signed (false).
     */
    public static boolean isSigned_data_recv_ctpDataHeader_data() {
        return false;
    }

    /**
     * Return whether the field 'data.recv.ctpDataHeader.data' is an array (true).
     */
    public static boolean isArray_data_recv_ctpDataHeader_data() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'data.recv.ctpDataHeader.data'
     */
    public static int offset_data_recv_ctpDataHeader_data(int index1) {
        int offset = 232;
        if (index1 < 0) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.recv.ctpDataHeader.data'
     */
    public static int offsetBits_data_recv_ctpDataHeader_data(int index1) {
        int offset = 232;
        if (index1 < 0) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'data.recv.ctpDataHeader.data' as a short[]
     */
    public short[] get_data_recv_ctpDataHeader_data() {
        throw new IllegalArgumentException("Cannot get field as array - unknown size");
    }

    /**
     * Set the contents of the array 'data.recv.ctpDataHeader.data' from the given short[]
     */
    public void set_data_recv_ctpDataHeader_data(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_data_recv_ctpDataHeader_data(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'data.recv.ctpDataHeader.data'
     */
    public short getElement_data_recv_ctpDataHeader_data(int index1) {
        return (short)getUIntBEElement(offsetBits_data_recv_ctpDataHeader_data(index1), 8);
    }

    /**
     * Set an element of the array 'data.recv.ctpDataHeader.data'
     */
    public void setElement_data_recv_ctpDataHeader_data(int index1, short value) {
        setUIntBEElement(offsetBits_data_recv_ctpDataHeader_data(index1), 8, value);
    }

    /**
     * Return the size, in bytes, of each element of the array 'data.recv.ctpDataHeader.data'
     */
    public static int elementSize_data_recv_ctpDataHeader_data() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'data.recv.ctpDataHeader.data'
     */
    public static int elementSizeBits_data_recv_ctpDataHeader_data() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'data.recv.ctpDataHeader.data'
     */
    public static int numDimensions_data_recv_ctpDataHeader_data() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'data.recv.ctpDataHeader.data'
     * for the given dimension.
     */
    public static int numElements_data_recv_ctpDataHeader_data(int dimension) {
      int array_dims[] = { 0,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'data.recv.ctpDataHeader.data' with a String
     */
    public void setString_data_recv_ctpDataHeader_data(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_data_recv_ctpDataHeader_data(i, (short)s.charAt(i));
         }
         setElement_data_recv_ctpDataHeader_data(i, (short)0); //null terminate
    }

    /**
     * Read the array 'data.recv.ctpDataHeader.data' as a String
     */
    public String getString_data_recv_ctpDataHeader_data() { 
         char carr[] = new char[net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_data_recv_ctpDataHeader_data(i) == (char)0) break;
             carr[i] = (char)getElement_data_recv_ctpDataHeader_data(i);
         }
         return new String(carr,0,i);
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.recv.rssi
    //   Field type: short, unsigned
    //   Offset (bits): 232
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.recv.rssi' is signed (false).
     */
    public static boolean isSigned_data_recv_rssi() {
        return false;
    }

    /**
     * Return whether the field 'data.recv.rssi' is an array (false).
     */
    public static boolean isArray_data_recv_rssi() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.recv.rssi'
     */
    public static int offset_data_recv_rssi() {
        return (232 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.recv.rssi'
     */
    public static int offsetBits_data_recv_rssi() {
        return 232;
    }

    /**
     * Return the value (as a short) of the field 'data.recv.rssi'
     */
    public short get_data_recv_rssi() {
        return (short)getSIntBEElement(offsetBits_data_recv_rssi(), 16);
    }

    /**
     * Set the value of the field 'data.recv.rssi'
     */
    public void set_data_recv_rssi(short value) {
        setSIntBEElement(offsetBits_data_recv_rssi(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.recv.rssi'
     */
    public static int size_data_recv_rssi() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.recv.rssi'
     */
    public static int sizeBits_data_recv_rssi() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.sent.ccaWaitTime
    //   Field type: long, unsigned
    //   Offset (bits): 168
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.sent.ccaWaitTime' is signed (false).
     */
    public static boolean isSigned_data_sent_ccaWaitTime() {
        return false;
    }

    /**
     * Return whether the field 'data.sent.ccaWaitTime' is an array (false).
     */
    public static boolean isArray_data_sent_ccaWaitTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.sent.ccaWaitTime'
     */
    public static int offset_data_sent_ccaWaitTime() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.sent.ccaWaitTime'
     */
    public static int offsetBits_data_sent_ccaWaitTime() {
        return 168;
    }

    /**
     * Return the value (as a long) of the field 'data.sent.ccaWaitTime'
     */
    public long get_data_sent_ccaWaitTime() {
        return (long)getUIntBEElement(offsetBits_data_sent_ccaWaitTime(), 32);
    }

    /**
     * Set the value of the field 'data.sent.ccaWaitTime'
     */
    public void set_data_sent_ccaWaitTime(long value) {
        setUIntBEElement(offsetBits_data_sent_ccaWaitTime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.sent.ccaWaitTime'
     */
    public static int size_data_sent_ccaWaitTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.sent.ccaWaitTime'
     */
    public static int sizeBits_data_sent_ccaWaitTime() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.sent.ccaWaitRounds
    //   Field type: int, unsigned
    //   Offset (bits): 200
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.sent.ccaWaitRounds' is signed (false).
     */
    public static boolean isSigned_data_sent_ccaWaitRounds() {
        return false;
    }

    /**
     * Return whether the field 'data.sent.ccaWaitRounds' is an array (false).
     */
    public static boolean isArray_data_sent_ccaWaitRounds() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.sent.ccaWaitRounds'
     */
    public static int offset_data_sent_ccaWaitRounds() {
        return (200 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.sent.ccaWaitRounds'
     */
    public static int offsetBits_data_sent_ccaWaitRounds() {
        return 200;
    }

    /**
     * Return the value (as a int) of the field 'data.sent.ccaWaitRounds'
     */
    public int get_data_sent_ccaWaitRounds() {
        return (int)getUIntBEElement(offsetBits_data_sent_ccaWaitRounds(), 16);
    }

    /**
     * Set the value of the field 'data.sent.ccaWaitRounds'
     */
    public void set_data_sent_ccaWaitRounds(int value) {
        setUIntBEElement(offsetBits_data_sent_ccaWaitRounds(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.sent.ccaWaitRounds'
     */
    public static int size_data_sent_ccaWaitRounds() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.sent.ccaWaitRounds'
     */
    public static int sizeBits_data_sent_ccaWaitRounds() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.sent.fwdRetryCount
    //   Field type: short, unsigned
    //   Offset (bits): 216
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.sent.fwdRetryCount' is signed (false).
     */
    public static boolean isSigned_data_sent_fwdRetryCount() {
        return false;
    }

    /**
     * Return whether the field 'data.sent.fwdRetryCount' is an array (false).
     */
    public static boolean isArray_data_sent_fwdRetryCount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.sent.fwdRetryCount'
     */
    public static int offset_data_sent_fwdRetryCount() {
        return (216 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.sent.fwdRetryCount'
     */
    public static int offsetBits_data_sent_fwdRetryCount() {
        return 216;
    }

    /**
     * Return the value (as a short) of the field 'data.sent.fwdRetryCount'
     */
    public short get_data_sent_fwdRetryCount() {
        return (short)getUIntBEElement(offsetBits_data_sent_fwdRetryCount(), 8);
    }

    /**
     * Set the value of the field 'data.sent.fwdRetryCount'
     */
    public void set_data_sent_fwdRetryCount(short value) {
        setUIntBEElement(offsetBits_data_sent_fwdRetryCount(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.sent.fwdRetryCount'
     */
    public static int size_data_sent_fwdRetryCount() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.sent.fwdRetryCount'
     */
    public static int sizeBits_data_sent_fwdRetryCount() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.sent.client
    //   Field type: short, unsigned
    //   Offset (bits): 224
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.sent.client' is signed (false).
     */
    public static boolean isSigned_data_sent_client() {
        return false;
    }

    /**
     * Return whether the field 'data.sent.client' is an array (false).
     */
    public static boolean isArray_data_sent_client() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.sent.client'
     */
    public static int offset_data_sent_client() {
        return (224 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.sent.client'
     */
    public static int offsetBits_data_sent_client() {
        return 224;
    }

    /**
     * Return the value (as a short) of the field 'data.sent.client'
     */
    public short get_data_sent_client() {
        return (short)getUIntBEElement(offsetBits_data_sent_client(), 8);
    }

    /**
     * Set the value of the field 'data.sent.client'
     */
    public void set_data_sent_client(short value) {
        setUIntBEElement(offsetBits_data_sent_client(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.sent.client'
     */
    public static int size_data_sent_client() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.sent.client'
     */
    public static int sizeBits_data_sent_client() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.sent.dest
    //   Field type: int, unsigned
    //   Offset (bits): 232
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.sent.dest' is signed (false).
     */
    public static boolean isSigned_data_sent_dest() {
        return false;
    }

    /**
     * Return whether the field 'data.sent.dest' is an array (false).
     */
    public static boolean isArray_data_sent_dest() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.sent.dest'
     */
    public static int offset_data_sent_dest() {
        return (232 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.sent.dest'
     */
    public static int offsetBits_data_sent_dest() {
        return 232;
    }

    /**
     * Return the value (as a int) of the field 'data.sent.dest'
     */
    public int get_data_sent_dest() {
        return (int)getUIntBEElement(offsetBits_data_sent_dest(), 16);
    }

    /**
     * Set the value of the field 'data.sent.dest'
     */
    public void set_data_sent_dest(int value) {
        setUIntBEElement(offsetBits_data_sent_dest(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.sent.dest'
     */
    public static int size_data_sent_dest() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.sent.dest'
     */
    public static int sizeBits_data_sent_dest() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.sent.acked
    //   Field type: byte, unsigned
    //   Offset (bits): 248
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.sent.acked' is signed (false).
     */
    public static boolean isSigned_data_sent_acked() {
        return false;
    }

    /**
     * Return whether the field 'data.sent.acked' is an array (false).
     */
    public static boolean isArray_data_sent_acked() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.sent.acked'
     */
    public static int offset_data_sent_acked() {
        return (248 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.sent.acked'
     */
    public static int offsetBits_data_sent_acked() {
        return 248;
    }

    /**
     * Return the value (as a byte) of the field 'data.sent.acked'
     */
    public byte get_data_sent_acked() {
        return (byte)getSIntBEElement(offsetBits_data_sent_acked(), 8);
    }

    /**
     * Set the value of the field 'data.sent.acked'
     */
    public void set_data_sent_acked(byte value) {
        setSIntBEElement(offsetBits_data_sent_acked(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.sent.acked'
     */
    public static int size_data_sent_acked() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.sent.acked'
     */
    public static int sizeBits_data_sent_acked() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: flags
    //   Field type: short, unsigned
    //   Offset (bits): 256
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'flags' is signed (false).
     */
    public static boolean isSigned_flags() {
        return false;
    }

    /**
     * Return whether the field 'flags' is an array (false).
     */
    public static boolean isArray_flags() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'flags'
     */
    public static int offset_flags() {
        return (256 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'flags'
     */
    public static int offsetBits_flags() {
        return 256;
    }

    /**
     * Return the value (as a short) of the field 'flags'
     */
    public short get_flags() {
        return (short)getUIntBEElement(offsetBits_flags(), 8);
    }

    /**
     * Set the value of the field 'flags'
     */
    public void set_flags(short value) {
        setUIntBEElement(offsetBits_flags(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'flags'
     */
    public static int size_flags() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'flags'
     */
    public static int sizeBits_flags() {
        return 8;
    }

}
