package fi.wsnusbcollect.messages;

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TimeSyncReportMsg'
 * message type.
 */

public class TimeSyncReportMsg extends net.tinyos.message.Message {
    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 22;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 104;

    /** Create a new TimeSyncReportMsg of size 22. */
    public TimeSyncReportMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new TimeSyncReportMsg of the given data_length. */
    public TimeSyncReportMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeSyncReportMsg with the given data_length
     * and base offset.
     */
    public TimeSyncReportMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeSyncReportMsg using the given byte array
     * as backing store.
     */
    public TimeSyncReportMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeSyncReportMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public TimeSyncReportMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeSyncReportMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TimeSyncReportMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeSyncReportMsg embedded in the given message
     * at the given base offset.
     */
    public TimeSyncReportMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TimeSyncReportMsg embedded in the given message
     * at the given base offset and length.
     */
    public TimeSyncReportMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <TimeSyncReportMsg> \n";
      try {
        s += "  [localTime=0x"+Long.toHexString(get_localTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [globalTime=0x"+Long.toHexString(get_globalTime())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [lastSync=0x"+Long.toHexString(get_lastSync())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [offset=0x"+Long.toHexString(get_offset())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [skew="+Float.toString(get_skew())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [hbeats=0x"+Long.toHexString(get_hbeats())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [entries=0x"+Long.toHexString(get_entries())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: localTime
    //   Field type: long, unsigned
    //   Offset (bits): 0
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'localTime' is signed (false).
     */
    public static boolean isSigned_localTime() {
        return false;
    }

    /**
     * Return whether the field 'localTime' is an array (false).
     */
    public static boolean isArray_localTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'localTime'
     */
    public static int offset_localTime() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'localTime'
     */
    public static int offsetBits_localTime() {
        return 0;
    }

    /**
     * Return the value (as a long) of the field 'localTime'
     */
    public long get_localTime() {
        return (long)getUIntBEElement(offsetBits_localTime(), 32);
    }

    /**
     * Set the value of the field 'localTime'
     */
    public void set_localTime(long value) {
        setUIntBEElement(offsetBits_localTime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'localTime'
     */
    public static int size_localTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'localTime'
     */
    public static int sizeBits_localTime() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: globalTime
    //   Field type: long, unsigned
    //   Offset (bits): 32
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'globalTime' is signed (false).
     */
    public static boolean isSigned_globalTime() {
        return false;
    }

    /**
     * Return whether the field 'globalTime' is an array (false).
     */
    public static boolean isArray_globalTime() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'globalTime'
     */
    public static int offset_globalTime() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'globalTime'
     */
    public static int offsetBits_globalTime() {
        return 32;
    }

    /**
     * Return the value (as a long) of the field 'globalTime'
     */
    public long get_globalTime() {
        return (long)getUIntBEElement(offsetBits_globalTime(), 32);
    }

    /**
     * Set the value of the field 'globalTime'
     */
    public void set_globalTime(long value) {
        setUIntBEElement(offsetBits_globalTime(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'globalTime'
     */
    public static int size_globalTime() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'globalTime'
     */
    public static int sizeBits_globalTime() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: lastSync
    //   Field type: long, unsigned
    //   Offset (bits): 64
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'lastSync' is signed (false).
     */
    public static boolean isSigned_lastSync() {
        return false;
    }

    /**
     * Return whether the field 'lastSync' is an array (false).
     */
    public static boolean isArray_lastSync() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'lastSync'
     */
    public static int offset_lastSync() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'lastSync'
     */
    public static int offsetBits_lastSync() {
        return 64;
    }

    /**
     * Return the value (as a long) of the field 'lastSync'
     */
    public long get_lastSync() {
        return (long)getUIntBEElement(offsetBits_lastSync(), 32);
    }

    /**
     * Set the value of the field 'lastSync'
     */
    public void set_lastSync(long value) {
        setUIntBEElement(offsetBits_lastSync(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'lastSync'
     */
    public static int size_lastSync() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'lastSync'
     */
    public static int sizeBits_lastSync() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: offset
    //   Field type: long, unsigned
    //   Offset (bits): 96
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'offset' is signed (false).
     */
    public static boolean isSigned_offset() {
        return false;
    }

    /**
     * Return whether the field 'offset' is an array (false).
     */
    public static boolean isArray_offset() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'offset'
     */
    public static int offset_offset() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'offset'
     */
    public static int offsetBits_offset() {
        return 96;
    }

    /**
     * Return the value (as a long) of the field 'offset'
     */
    public long get_offset() {
        return (long)getUIntBEElement(offsetBits_offset(), 32);
    }

    /**
     * Set the value of the field 'offset'
     */
    public void set_offset(long value) {
        setUIntBEElement(offsetBits_offset(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'offset'
     */
    public static int size_offset() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'offset'
     */
    public static int sizeBits_offset() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: skew
    //   Field type: float, unsigned
    //   Offset (bits): 128
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'skew' is signed (false).
     */
    public static boolean isSigned_skew() {
        return false;
    }

    /**
     * Return whether the field 'skew' is an array (false).
     */
    public static boolean isArray_skew() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'skew'
     */
    public static int offset_skew() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'skew'
     */
    public static int offsetBits_skew() {
        return 128;
    }

    /**
     * Return the value (as a float) of the field 'skew'
     */
    public float get_skew() {
        return (float)getFloatElement(offsetBits_skew(), 32);
    }

    /**
     * Set the value of the field 'skew'
     */
    public void set_skew(float value) {
        setFloatElement(offsetBits_skew(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'skew'
     */
    public static int size_skew() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'skew'
     */
    public static int sizeBits_skew() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hbeats
    //   Field type: short, unsigned
    //   Offset (bits): 160
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hbeats' is signed (false).
     */
    public static boolean isSigned_hbeats() {
        return false;
    }

    /**
     * Return whether the field 'hbeats' is an array (false).
     */
    public static boolean isArray_hbeats() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hbeats'
     */
    public static int offset_hbeats() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hbeats'
     */
    public static int offsetBits_hbeats() {
        return 160;
    }

    /**
     * Return the value (as a short) of the field 'hbeats'
     */
    public short get_hbeats() {
        return (short)getUIntBEElement(offsetBits_hbeats(), 8);
    }

    /**
     * Set the value of the field 'hbeats'
     */
    public void set_hbeats(short value) {
        setUIntBEElement(offsetBits_hbeats(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'hbeats'
     */
    public static int size_hbeats() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hbeats'
     */
    public static int sizeBits_hbeats() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: entries
    //   Field type: short, unsigned
    //   Offset (bits): 168
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'entries' is signed (false).
     */
    public static boolean isSigned_entries() {
        return false;
    }

    /**
     * Return whether the field 'entries' is an array (false).
     */
    public static boolean isArray_entries() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'entries'
     */
    public static int offset_entries() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'entries'
     */
    public static int offsetBits_entries() {
        return 168;
    }

    /**
     * Return the value (as a short) of the field 'entries'
     */
    public short get_entries() {
        return (short)getUIntBEElement(offsetBits_entries(), 8);
    }

    /**
     * Set the value of the field 'entries'
     */
    public void set_entries(short value) {
        setUIntBEElement(offsetBits_entries(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'entries'
     */
    public static int size_entries() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'entries'
     */
    public static int sizeBits_entries() {
        return 8;
    }
}
