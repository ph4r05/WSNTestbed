package fi.wsnusbcollect.messages;

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'CtpInfoMsg'
 * message type.
 */

public class CtpInfoMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 13;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 236;

    /** Create a new CtpInfoMsg of size 13. */
    public CtpInfoMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new CtpInfoMsg of the given data_length. */
    public CtpInfoMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpInfoMsg with the given data_length
     * and base offset.
     */
    public CtpInfoMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpInfoMsg using the given byte array
     * as backing store.
     */
    public CtpInfoMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpInfoMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public CtpInfoMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpInfoMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public CtpInfoMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpInfoMsg embedded in the given message
     * at the given base offset.
     */
    public CtpInfoMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpInfoMsg embedded in the given message
     * at the given base offset and length.
     */
    public CtpInfoMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <CtpInfoMsg> \n";
      try {
        s += "  [type=0x"+Long.toHexString(get_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.data.data=";
        for (int i = 0; i < 6; i++) {
          s += "0x"+Long.toHexString(getElement_data_data_data(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.status.parent="+(get_data_status_parent())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.status.etx=0x"+Long.toHexString(get_data_status_etx())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.status.neighbors="+(get_data_status_neighbors())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.status.serialQueueSize="+(get_data_status_serialQueueSize())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.status.ctpSeqNo="+(get_data_status_ctpSeqNo())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.status.ctpBusyCount="+(get_data_status_ctpBusyCount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.status.flags=0x"+Long.toHexString(get_data_status_flags())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.neighInfo.num="+(get_data_neighInfo_num())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.neighInfo.addr="+(get_data_neighInfo_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.neighInfo.linkQuality=0x"+Long.toHexString(get_data_neighInfo_linkQuality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.neighInfo.routeQuality=0x"+Long.toHexString(get_data_neighInfo_routeQuality())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.neighInfo.flags=0x"+Long.toHexString(get_data_neighInfo_flags())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type
    //   Field type: short
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type' is signed (false).
     */
    public static boolean isSigned_type() {
        return false;
    }

    /**
     * Return whether the field 'type' is an array (false).
     */
    public static boolean isArray_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type'
     */
    public static int offset_type() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type'
     */
    public static int offsetBits_type() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'type'
     */
    public short get_type() {
        return (short)getUIntBEElement(offsetBits_type(), 8);
    }

    /**
     * Set the value of the field 'type'
     */
    public void set_type(short value) {
        setUIntBEElement(offsetBits_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type'
     */
    public static int size_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type'
     */
    public static int sizeBits_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.data.data
    //   Field type: int[]
    //   Offset (bits): 8
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.data.data' is signed (false).
     */
    public static boolean isSigned_data_data_data() {
        return false;
    }

    /**
     * Return whether the field 'data.data.data' is an array (true).
     */
    public static boolean isArray_data_data_data() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'data.data.data'
     */
    public static int offset_data_data_data(int index1) {
        int offset = 8;
        if (index1 < 0 || index1 >= 6) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.data.data'
     */
    public static int offsetBits_data_data_data(int index1) {
        int offset = 8;
        if (index1 < 0 || index1 >= 6) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'data.data.data' as a int[]
     */
    public int[] get_data_data_data() {
        int[] tmp = new int[6];
        for (int index0 = 0; index0 < numElements_data_data_data(0); index0++) {
            tmp[index0] = getElement_data_data_data(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'data.data.data' from the given int[]
     */
    public void set_data_data_data(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_data_data_data(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'data.data.data'
     */
    public int getElement_data_data_data(int index1) {
        return (int)getUIntBEElement(offsetBits_data_data_data(index1), 16);
    }

    /**
     * Set an element of the array 'data.data.data'
     */
    public void setElement_data_data_data(int index1, int value) {
        setUIntBEElement(offsetBits_data_data_data(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'data.data.data'
     */
    public static int totalSize_data_data_data() {
        return (96 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'data.data.data'
     */
    public static int totalSizeBits_data_data_data() {
        return 96;
    }

    /**
     * Return the size, in bytes, of each element of the array 'data.data.data'
     */
    public static int elementSize_data_data_data() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'data.data.data'
     */
    public static int elementSizeBits_data_data_data() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'data.data.data'
     */
    public static int numDimensions_data_data_data() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'data.data.data'
     */
    public static int numElements_data_data_data() {
        return 6;
    }

    /**
     * Return the number of elements in the array 'data.data.data'
     * for the given dimension.
     */
    public static int numElements_data_data_data(int dimension) {
      int array_dims[] = { 6,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.status.parent
    //   Field type: int
    //   Offset (bits): 8
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.status.parent' is signed (false).
     */
    public static boolean isSigned_data_status_parent() {
        return false;
    }

    /**
     * Return whether the field 'data.status.parent' is an array (false).
     */
    public static boolean isArray_data_status_parent() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.status.parent'
     */
    public static int offset_data_status_parent() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.status.parent'
     */
    public static int offsetBits_data_status_parent() {
        return 8;
    }

    /**
     * Return the value (as a int) of the field 'data.status.parent'
     */
    public int get_data_status_parent() {
        return (int)getUIntBEElement(offsetBits_data_status_parent(), 16);
    }

    /**
     * Set the value of the field 'data.status.parent'
     */
    public void set_data_status_parent(int value) {
        setUIntBEElement(offsetBits_data_status_parent(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.status.parent'
     */
    public static int size_data_status_parent() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.status.parent'
     */
    public static int sizeBits_data_status_parent() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.status.etx
    //   Field type: int
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.status.etx' is signed (false).
     */
    public static boolean isSigned_data_status_etx() {
        return false;
    }

    /**
     * Return whether the field 'data.status.etx' is an array (false).
     */
    public static boolean isArray_data_status_etx() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.status.etx'
     */
    public static int offset_data_status_etx() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.status.etx'
     */
    public static int offsetBits_data_status_etx() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'data.status.etx'
     */
    public int get_data_status_etx() {
        return (int)getUIntBEElement(offsetBits_data_status_etx(), 16);
    }

    /**
     * Set the value of the field 'data.status.etx'
     */
    public void set_data_status_etx(int value) {
        setUIntBEElement(offsetBits_data_status_etx(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.status.etx'
     */
    public static int size_data_status_etx() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.status.etx'
     */
    public static int sizeBits_data_status_etx() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.status.neighbors
    //   Field type: short
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.status.neighbors' is signed (false).
     */
    public static boolean isSigned_data_status_neighbors() {
        return false;
    }

    /**
     * Return whether the field 'data.status.neighbors' is an array (false).
     */
    public static boolean isArray_data_status_neighbors() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.status.neighbors'
     */
    public static int offset_data_status_neighbors() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.status.neighbors'
     */
    public static int offsetBits_data_status_neighbors() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'data.status.neighbors'
     */
    public short get_data_status_neighbors() {
        return (short)getUIntBEElement(offsetBits_data_status_neighbors(), 8);
    }

    /**
     * Set the value of the field 'data.status.neighbors'
     */
    public void set_data_status_neighbors(short value) {
        setUIntBEElement(offsetBits_data_status_neighbors(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.status.neighbors'
     */
    public static int size_data_status_neighbors() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.status.neighbors'
     */
    public static int sizeBits_data_status_neighbors() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.status.serialQueueSize
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.status.serialQueueSize' is signed (false).
     */
    public static boolean isSigned_data_status_serialQueueSize() {
        return false;
    }

    /**
     * Return whether the field 'data.status.serialQueueSize' is an array (false).
     */
    public static boolean isArray_data_status_serialQueueSize() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.status.serialQueueSize'
     */
    public static int offset_data_status_serialQueueSize() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.status.serialQueueSize'
     */
    public static int offsetBits_data_status_serialQueueSize() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'data.status.serialQueueSize'
     */
    public short get_data_status_serialQueueSize() {
        return (short)getUIntBEElement(offsetBits_data_status_serialQueueSize(), 8);
    }

    /**
     * Set the value of the field 'data.status.serialQueueSize'
     */
    public void set_data_status_serialQueueSize(short value) {
        setUIntBEElement(offsetBits_data_status_serialQueueSize(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.status.serialQueueSize'
     */
    public static int size_data_status_serialQueueSize() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.status.serialQueueSize'
     */
    public static int sizeBits_data_status_serialQueueSize() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.status.ctpSeqNo
    //   Field type: int
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.status.ctpSeqNo' is signed (false).
     */
    public static boolean isSigned_data_status_ctpSeqNo() {
        return false;
    }

    /**
     * Return whether the field 'data.status.ctpSeqNo' is an array (false).
     */
    public static boolean isArray_data_status_ctpSeqNo() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.status.ctpSeqNo'
     */
    public static int offset_data_status_ctpSeqNo() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.status.ctpSeqNo'
     */
    public static int offsetBits_data_status_ctpSeqNo() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'data.status.ctpSeqNo'
     */
    public int get_data_status_ctpSeqNo() {
        return (int)getUIntBEElement(offsetBits_data_status_ctpSeqNo(), 16);
    }

    /**
     * Set the value of the field 'data.status.ctpSeqNo'
     */
    public void set_data_status_ctpSeqNo(int value) {
        setUIntBEElement(offsetBits_data_status_ctpSeqNo(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.status.ctpSeqNo'
     */
    public static int size_data_status_ctpSeqNo() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.status.ctpSeqNo'
     */
    public static int sizeBits_data_status_ctpSeqNo() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.status.ctpBusyCount
    //   Field type: short
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.status.ctpBusyCount' is signed (false).
     */
    public static boolean isSigned_data_status_ctpBusyCount() {
        return false;
    }

    /**
     * Return whether the field 'data.status.ctpBusyCount' is an array (false).
     */
    public static boolean isArray_data_status_ctpBusyCount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.status.ctpBusyCount'
     */
    public static int offset_data_status_ctpBusyCount() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.status.ctpBusyCount'
     */
    public static int offsetBits_data_status_ctpBusyCount() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'data.status.ctpBusyCount'
     */
    public short get_data_status_ctpBusyCount() {
        return (short)getUIntBEElement(offsetBits_data_status_ctpBusyCount(), 8);
    }

    /**
     * Set the value of the field 'data.status.ctpBusyCount'
     */
    public void set_data_status_ctpBusyCount(short value) {
        setUIntBEElement(offsetBits_data_status_ctpBusyCount(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.status.ctpBusyCount'
     */
    public static int size_data_status_ctpBusyCount() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.status.ctpBusyCount'
     */
    public static int sizeBits_data_status_ctpBusyCount() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.status.flags
    //   Field type: int
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.status.flags' is signed (false).
     */
    public static boolean isSigned_data_status_flags() {
        return false;
    }

    /**
     * Return whether the field 'data.status.flags' is an array (false).
     */
    public static boolean isArray_data_status_flags() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.status.flags'
     */
    public static int offset_data_status_flags() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.status.flags'
     */
    public static int offsetBits_data_status_flags() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'data.status.flags'
     */
    public int get_data_status_flags() {
        return (int)getUIntBEElement(offsetBits_data_status_flags(), 16);
    }

    /**
     * Set the value of the field 'data.status.flags'
     */
    public void set_data_status_flags(int value) {
        setUIntBEElement(offsetBits_data_status_flags(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.status.flags'
     */
    public static int size_data_status_flags() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.status.flags'
     */
    public static int sizeBits_data_status_flags() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.neighInfo.num
    //   Field type: short
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.neighInfo.num' is signed (false).
     */
    public static boolean isSigned_data_neighInfo_num() {
        return false;
    }

    /**
     * Return whether the field 'data.neighInfo.num' is an array (false).
     */
    public static boolean isArray_data_neighInfo_num() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.neighInfo.num'
     */
    public static int offset_data_neighInfo_num() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.neighInfo.num'
     */
    public static int offsetBits_data_neighInfo_num() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'data.neighInfo.num'
     */
    public short get_data_neighInfo_num() {
        return (short)getUIntBEElement(offsetBits_data_neighInfo_num(), 8);
    }

    /**
     * Set the value of the field 'data.neighInfo.num'
     */
    public void set_data_neighInfo_num(short value) {
        setUIntBEElement(offsetBits_data_neighInfo_num(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.neighInfo.num'
     */
    public static int size_data_neighInfo_num() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.neighInfo.num'
     */
    public static int sizeBits_data_neighInfo_num() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.neighInfo.addr
    //   Field type: int
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.neighInfo.addr' is signed (false).
     */
    public static boolean isSigned_data_neighInfo_addr() {
        return false;
    }

    /**
     * Return whether the field 'data.neighInfo.addr' is an array (false).
     */
    public static boolean isArray_data_neighInfo_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.neighInfo.addr'
     */
    public static int offset_data_neighInfo_addr() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.neighInfo.addr'
     */
    public static int offsetBits_data_neighInfo_addr() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'data.neighInfo.addr'
     */
    public int get_data_neighInfo_addr() {
        return (int)getUIntBEElement(offsetBits_data_neighInfo_addr(), 16);
    }

    /**
     * Set the value of the field 'data.neighInfo.addr'
     */
    public void set_data_neighInfo_addr(int value) {
        setUIntBEElement(offsetBits_data_neighInfo_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.neighInfo.addr'
     */
    public static int size_data_neighInfo_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.neighInfo.addr'
     */
    public static int sizeBits_data_neighInfo_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.neighInfo.linkQuality
    //   Field type: int
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.neighInfo.linkQuality' is signed (false).
     */
    public static boolean isSigned_data_neighInfo_linkQuality() {
        return false;
    }

    /**
     * Return whether the field 'data.neighInfo.linkQuality' is an array (false).
     */
    public static boolean isArray_data_neighInfo_linkQuality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.neighInfo.linkQuality'
     */
    public static int offset_data_neighInfo_linkQuality() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.neighInfo.linkQuality'
     */
    public static int offsetBits_data_neighInfo_linkQuality() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'data.neighInfo.linkQuality'
     */
    public int get_data_neighInfo_linkQuality() {
        return (int)getUIntBEElement(offsetBits_data_neighInfo_linkQuality(), 16);
    }

    /**
     * Set the value of the field 'data.neighInfo.linkQuality'
     */
    public void set_data_neighInfo_linkQuality(int value) {
        setUIntBEElement(offsetBits_data_neighInfo_linkQuality(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.neighInfo.linkQuality'
     */
    public static int size_data_neighInfo_linkQuality() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.neighInfo.linkQuality'
     */
    public static int sizeBits_data_neighInfo_linkQuality() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.neighInfo.routeQuality
    //   Field type: int
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.neighInfo.routeQuality' is signed (false).
     */
    public static boolean isSigned_data_neighInfo_routeQuality() {
        return false;
    }

    /**
     * Return whether the field 'data.neighInfo.routeQuality' is an array (false).
     */
    public static boolean isArray_data_neighInfo_routeQuality() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.neighInfo.routeQuality'
     */
    public static int offset_data_neighInfo_routeQuality() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.neighInfo.routeQuality'
     */
    public static int offsetBits_data_neighInfo_routeQuality() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'data.neighInfo.routeQuality'
     */
    public int get_data_neighInfo_routeQuality() {
        return (int)getUIntBEElement(offsetBits_data_neighInfo_routeQuality(), 16);
    }

    /**
     * Set the value of the field 'data.neighInfo.routeQuality'
     */
    public void set_data_neighInfo_routeQuality(int value) {
        setUIntBEElement(offsetBits_data_neighInfo_routeQuality(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.neighInfo.routeQuality'
     */
    public static int size_data_neighInfo_routeQuality() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.neighInfo.routeQuality'
     */
    public static int sizeBits_data_neighInfo_routeQuality() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.neighInfo.flags
    //   Field type: int
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.neighInfo.flags' is signed (false).
     */
    public static boolean isSigned_data_neighInfo_flags() {
        return false;
    }

    /**
     * Return whether the field 'data.neighInfo.flags' is an array (false).
     */
    public static boolean isArray_data_neighInfo_flags() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.neighInfo.flags'
     */
    public static int offset_data_neighInfo_flags() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.neighInfo.flags'
     */
    public static int offsetBits_data_neighInfo_flags() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'data.neighInfo.flags'
     */
    public int get_data_neighInfo_flags() {
        return (int)getUIntBEElement(offsetBits_data_neighInfo_flags(), 16);
    }

    /**
     * Set the value of the field 'data.neighInfo.flags'
     */
    public void set_data_neighInfo_flags(int value) {
        setUIntBEElement(offsetBits_data_neighInfo_flags(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.neighInfo.flags'
     */
    public static int size_data_neighInfo_flags() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.neighInfo.flags'
     */
    public static int sizeBits_data_neighInfo_flags() {
        return 16;
    }

}
