package fi.wsnusbcollect.messages;

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'CtpSendRequestMsg'
 * message type.
 */

public class CtpSendRequestMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 14;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 238;

    /** Create a new CtpSendRequestMsg of size 14. */
    public CtpSendRequestMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new CtpSendRequestMsg of the given data_length. */
    public CtpSendRequestMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpSendRequestMsg with the given data_length
     * and base offset.
     */
    public CtpSendRequestMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpSendRequestMsg using the given byte array
     * as backing store.
     */
    public CtpSendRequestMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpSendRequestMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public CtpSendRequestMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpSendRequestMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public CtpSendRequestMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpSendRequestMsg embedded in the given message
     * at the given base offset.
     */
    public CtpSendRequestMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CtpSendRequestMsg embedded in the given message
     * at the given base offset and length.
     */
    public CtpSendRequestMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <CtpSendRequestMsg> \n";
      try {
        s += "  [counter=0x"+Long.toHexString(get_counter())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [packets=0x"+Long.toHexString(get_packets())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [delay=0x"+Long.toHexString(get_delay())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [delayVariability="+Float.toString(get_delayVariability())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [size=0x"+Long.toHexString(get_size())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [dataSource=0x"+Long.toHexString(get_dataSource())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [flags=0x"+Long.toHexString(get_flags())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: counter
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'counter' is signed (false).
     */
    public static boolean isSigned_counter() {
        return false;
    }

    /**
     * Return whether the field 'counter' is an array (false).
     */
    public static boolean isArray_counter() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'counter'
     */
    public static int offset_counter() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'counter'
     */
    public static int offsetBits_counter() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'counter'
     */
    public int get_counter() {
        return (int)getUIntBEElement(offsetBits_counter(), 16);
    }

    /**
     * Set the value of the field 'counter'
     */
    public void set_counter(int value) {
        setUIntBEElement(offsetBits_counter(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'counter'
     */
    public static int size_counter() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'counter'
     */
    public static int sizeBits_counter() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: packets
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'packets' is signed (false).
     */
    public static boolean isSigned_packets() {
        return false;
    }

    /**
     * Return whether the field 'packets' is an array (false).
     */
    public static boolean isArray_packets() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'packets'
     */
    public static int offset_packets() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'packets'
     */
    public static int offsetBits_packets() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'packets'
     */
    public int get_packets() {
        return (int)getUIntBEElement(offsetBits_packets(), 16);
    }

    /**
     * Set the value of the field 'packets'
     */
    public void set_packets(int value) {
        setUIntBEElement(offsetBits_packets(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'packets'
     */
    public static int size_packets() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'packets'
     */
    public static int sizeBits_packets() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: delay
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'delay' is signed (false).
     */
    public static boolean isSigned_delay() {
        return false;
    }

    /**
     * Return whether the field 'delay' is an array (false).
     */
    public static boolean isArray_delay() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'delay'
     */
    public static int offset_delay() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'delay'
     */
    public static int offsetBits_delay() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'delay'
     */
    public int get_delay() {
        return (int)getUIntBEElement(offsetBits_delay(), 16);
    }

    /**
     * Set the value of the field 'delay'
     */
    public void set_delay(int value) {
        setUIntBEElement(offsetBits_delay(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'delay'
     */
    public static int size_delay() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'delay'
     */
    public static int sizeBits_delay() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: delayVariability
    //   Field type: float, unsigned
    //   Offset (bits): 48
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'delayVariability' is signed (false).
     */
    public static boolean isSigned_delayVariability() {
        return false;
    }

    /**
     * Return whether the field 'delayVariability' is an array (false).
     */
    public static boolean isArray_delayVariability() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'delayVariability'
     */
    public static int offset_delayVariability() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'delayVariability'
     */
    public static int offsetBits_delayVariability() {
        return 48;
    }

    /**
     * Return the value (as a float) of the field 'delayVariability'
     */
    public float get_delayVariability() {
        return (float)getFloatElement(offsetBits_delayVariability(), 32);
    }

    /**
     * Set the value of the field 'delayVariability'
     */
    public void set_delayVariability(float value) {
        setFloatElement(offsetBits_delayVariability(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'delayVariability'
     */
    public static int size_delayVariability() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'delayVariability'
     */
    public static int sizeBits_delayVariability() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: size
    //   Field type: short, unsigned
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'size' is signed (false).
     */
    public static boolean isSigned_size() {
        return false;
    }

    /**
     * Return whether the field 'size' is an array (false).
     */
    public static boolean isArray_size() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'size'
     */
    public static int offset_size() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'size'
     */
    public static int offsetBits_size() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'size'
     */
    public short get_size() {
        return (short)getUIntBEElement(offsetBits_size(), 8);
    }

    /**
     * Set the value of the field 'size'
     */
    public void set_size(short value) {
        setUIntBEElement(offsetBits_size(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'size'
     */
    public static int size_size() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'size'
     */
    public static int sizeBits_size() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dataSource
    //   Field type: short, unsigned
    //   Offset (bits): 88
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dataSource' is signed (false).
     */
    public static boolean isSigned_dataSource() {
        return false;
    }

    /**
     * Return whether the field 'dataSource' is an array (false).
     */
    public static boolean isArray_dataSource() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'dataSource'
     */
    public static int offset_dataSource() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dataSource'
     */
    public static int offsetBits_dataSource() {
        return 88;
    }

    /**
     * Return the value (as a short) of the field 'dataSource'
     */
    public short get_dataSource() {
        return (short)getUIntBEElement(offsetBits_dataSource(), 8);
    }

    /**
     * Set the value of the field 'dataSource'
     */
    public void set_dataSource(short value) {
        setUIntBEElement(offsetBits_dataSource(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'dataSource'
     */
    public static int size_dataSource() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'dataSource'
     */
    public static int sizeBits_dataSource() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: flags
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'flags' is signed (false).
     */
    public static boolean isSigned_flags() {
        return false;
    }

    /**
     * Return whether the field 'flags' is an array (false).
     */
    public static boolean isArray_flags() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'flags'
     */
    public static int offset_flags() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'flags'
     */
    public static int offsetBits_flags() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'flags'
     */
    public int get_flags() {
        return (int)getUIntBEElement(offsetBits_flags(), 16);
    }

    /**
     * Set the value of the field 'flags'
     */
    public void set_flags(int value) {
        setUIntBEElement(offsetBits_flags(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'flags'
     */
    public static int size_flags() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'flags'
     */
    public static int sizeBits_flags() {
        return 16;
    }

}
