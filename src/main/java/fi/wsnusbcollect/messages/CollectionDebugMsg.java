package fi.wsnusbcollect.messages;

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'CollectionDebugMsg'
 * message type.
 */

public class CollectionDebugMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 9;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 114;

    /** Create a new CollectionDebugMsg of size 9. */
    public CollectionDebugMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new CollectionDebugMsg of the given data_length. */
    public CollectionDebugMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CollectionDebugMsg with the given data_length
     * and base offset.
     */
    public CollectionDebugMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CollectionDebugMsg using the given byte array
     * as backing store.
     */
    public CollectionDebugMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CollectionDebugMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public CollectionDebugMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CollectionDebugMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public CollectionDebugMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CollectionDebugMsg embedded in the given message
     * at the given base offset.
     */
    public CollectionDebugMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new CollectionDebugMsg embedded in the given message
     * at the given base offset and length.
     */
    public CollectionDebugMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <CollectionDebugMsg> \n";
      try {
        s += "  [type=0x"+Long.toHexString(get_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.arg=0x"+Long.toHexString(get_data_arg())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.msg.msg_uid=0x"+Long.toHexString(get_data_msg_msg_uid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.msg.origin=0x"+Long.toHexString(get_data_msg_origin())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.msg.other_node=0x"+Long.toHexString(get_data_msg_other_node())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.route_info.parent=0x"+Long.toHexString(get_data_route_info_parent())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.route_info.hopcount=0x"+Long.toHexString(get_data_route_info_hopcount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.route_info.metric=0x"+Long.toHexString(get_data_route_info_metric())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.dbg.a=0x"+Long.toHexString(get_data_dbg_a())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.dbg.b=0x"+Long.toHexString(get_data_dbg_b())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data.dbg.c=0x"+Long.toHexString(get_data_dbg_c())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seqno=0x"+Long.toHexString(get_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type' is signed (false).
     */
    public static boolean isSigned_type() {
        return false;
    }

    /**
     * Return whether the field 'type' is an array (false).
     */
    public static boolean isArray_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type'
     */
    public static int offset_type() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type'
     */
    public static int offsetBits_type() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'type'
     */
    public short get_type() {
        return (short)getUIntBEElement(offsetBits_type(), 8);
    }

    /**
     * Set the value of the field 'type'
     */
    public void set_type(short value) {
        setUIntBEElement(offsetBits_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type'
     */
    public static int size_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type'
     */
    public static int sizeBits_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.arg
    //   Field type: int, unsigned
    //   Offset (bits): 8
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.arg' is signed (false).
     */
    public static boolean isSigned_data_arg() {
        return false;
    }

    /**
     * Return whether the field 'data.arg' is an array (false).
     */
    public static boolean isArray_data_arg() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.arg'
     */
    public static int offset_data_arg() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.arg'
     */
    public static int offsetBits_data_arg() {
        return 8;
    }

    /**
     * Return the value (as a int) of the field 'data.arg'
     */
    public int get_data_arg() {
        return (int)getUIntBEElement(offsetBits_data_arg(), 16);
    }

    /**
     * Set the value of the field 'data.arg'
     */
    public void set_data_arg(int value) {
        setUIntBEElement(offsetBits_data_arg(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.arg'
     */
    public static int size_data_arg() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.arg'
     */
    public static int sizeBits_data_arg() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.msg.msg_uid
    //   Field type: int, unsigned
    //   Offset (bits): 8
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.msg.msg_uid' is signed (false).
     */
    public static boolean isSigned_data_msg_msg_uid() {
        return false;
    }

    /**
     * Return whether the field 'data.msg.msg_uid' is an array (false).
     */
    public static boolean isArray_data_msg_msg_uid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.msg.msg_uid'
     */
    public static int offset_data_msg_msg_uid() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.msg.msg_uid'
     */
    public static int offsetBits_data_msg_msg_uid() {
        return 8;
    }

    /**
     * Return the value (as a int) of the field 'data.msg.msg_uid'
     */
    public int get_data_msg_msg_uid() {
        return (int)getUIntBEElement(offsetBits_data_msg_msg_uid(), 16);
    }

    /**
     * Set the value of the field 'data.msg.msg_uid'
     */
    public void set_data_msg_msg_uid(int value) {
        setUIntBEElement(offsetBits_data_msg_msg_uid(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.msg.msg_uid'
     */
    public static int size_data_msg_msg_uid() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.msg.msg_uid'
     */
    public static int sizeBits_data_msg_msg_uid() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.msg.origin
    //   Field type: int, unsigned
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.msg.origin' is signed (false).
     */
    public static boolean isSigned_data_msg_origin() {
        return false;
    }

    /**
     * Return whether the field 'data.msg.origin' is an array (false).
     */
    public static boolean isArray_data_msg_origin() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.msg.origin'
     */
    public static int offset_data_msg_origin() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.msg.origin'
     */
    public static int offsetBits_data_msg_origin() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'data.msg.origin'
     */
    public int get_data_msg_origin() {
        return (int)getUIntBEElement(offsetBits_data_msg_origin(), 16);
    }

    /**
     * Set the value of the field 'data.msg.origin'
     */
    public void set_data_msg_origin(int value) {
        setUIntBEElement(offsetBits_data_msg_origin(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.msg.origin'
     */
    public static int size_data_msg_origin() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.msg.origin'
     */
    public static int sizeBits_data_msg_origin() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.msg.other_node
    //   Field type: int, unsigned
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.msg.other_node' is signed (false).
     */
    public static boolean isSigned_data_msg_other_node() {
        return false;
    }

    /**
     * Return whether the field 'data.msg.other_node' is an array (false).
     */
    public static boolean isArray_data_msg_other_node() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.msg.other_node'
     */
    public static int offset_data_msg_other_node() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.msg.other_node'
     */
    public static int offsetBits_data_msg_other_node() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'data.msg.other_node'
     */
    public int get_data_msg_other_node() {
        return (int)getUIntBEElement(offsetBits_data_msg_other_node(), 16);
    }

    /**
     * Set the value of the field 'data.msg.other_node'
     */
    public void set_data_msg_other_node(int value) {
        setUIntBEElement(offsetBits_data_msg_other_node(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.msg.other_node'
     */
    public static int size_data_msg_other_node() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.msg.other_node'
     */
    public static int sizeBits_data_msg_other_node() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.route_info.parent
    //   Field type: int, unsigned
    //   Offset (bits): 8
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.route_info.parent' is signed (false).
     */
    public static boolean isSigned_data_route_info_parent() {
        return false;
    }

    /**
     * Return whether the field 'data.route_info.parent' is an array (false).
     */
    public static boolean isArray_data_route_info_parent() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.route_info.parent'
     */
    public static int offset_data_route_info_parent() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.route_info.parent'
     */
    public static int offsetBits_data_route_info_parent() {
        return 8;
    }

    /**
     * Return the value (as a int) of the field 'data.route_info.parent'
     */
    public int get_data_route_info_parent() {
        return (int)getUIntBEElement(offsetBits_data_route_info_parent(), 16);
    }

    /**
     * Set the value of the field 'data.route_info.parent'
     */
    public void set_data_route_info_parent(int value) {
        setUIntBEElement(offsetBits_data_route_info_parent(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.route_info.parent'
     */
    public static int size_data_route_info_parent() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.route_info.parent'
     */
    public static int sizeBits_data_route_info_parent() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.route_info.hopcount
    //   Field type: short, unsigned
    //   Offset (bits): 24
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.route_info.hopcount' is signed (false).
     */
    public static boolean isSigned_data_route_info_hopcount() {
        return false;
    }

    /**
     * Return whether the field 'data.route_info.hopcount' is an array (false).
     */
    public static boolean isArray_data_route_info_hopcount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.route_info.hopcount'
     */
    public static int offset_data_route_info_hopcount() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.route_info.hopcount'
     */
    public static int offsetBits_data_route_info_hopcount() {
        return 24;
    }

    /**
     * Return the value (as a short) of the field 'data.route_info.hopcount'
     */
    public short get_data_route_info_hopcount() {
        return (short)getUIntBEElement(offsetBits_data_route_info_hopcount(), 8);
    }

    /**
     * Set the value of the field 'data.route_info.hopcount'
     */
    public void set_data_route_info_hopcount(short value) {
        setUIntBEElement(offsetBits_data_route_info_hopcount(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.route_info.hopcount'
     */
    public static int size_data_route_info_hopcount() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.route_info.hopcount'
     */
    public static int sizeBits_data_route_info_hopcount() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.route_info.metric
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.route_info.metric' is signed (false).
     */
    public static boolean isSigned_data_route_info_metric() {
        return false;
    }

    /**
     * Return whether the field 'data.route_info.metric' is an array (false).
     */
    public static boolean isArray_data_route_info_metric() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.route_info.metric'
     */
    public static int offset_data_route_info_metric() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.route_info.metric'
     */
    public static int offsetBits_data_route_info_metric() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'data.route_info.metric'
     */
    public int get_data_route_info_metric() {
        return (int)getUIntBEElement(offsetBits_data_route_info_metric(), 16);
    }

    /**
     * Set the value of the field 'data.route_info.metric'
     */
    public void set_data_route_info_metric(int value) {
        setUIntBEElement(offsetBits_data_route_info_metric(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.route_info.metric'
     */
    public static int size_data_route_info_metric() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.route_info.metric'
     */
    public static int sizeBits_data_route_info_metric() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.dbg.a
    //   Field type: int, unsigned
    //   Offset (bits): 8
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.dbg.a' is signed (false).
     */
    public static boolean isSigned_data_dbg_a() {
        return false;
    }

    /**
     * Return whether the field 'data.dbg.a' is an array (false).
     */
    public static boolean isArray_data_dbg_a() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.dbg.a'
     */
    public static int offset_data_dbg_a() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.dbg.a'
     */
    public static int offsetBits_data_dbg_a() {
        return 8;
    }

    /**
     * Return the value (as a int) of the field 'data.dbg.a'
     */
    public int get_data_dbg_a() {
        return (int)getUIntBEElement(offsetBits_data_dbg_a(), 16);
    }

    /**
     * Set the value of the field 'data.dbg.a'
     */
    public void set_data_dbg_a(int value) {
        setUIntBEElement(offsetBits_data_dbg_a(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.dbg.a'
     */
    public static int size_data_dbg_a() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.dbg.a'
     */
    public static int sizeBits_data_dbg_a() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.dbg.b
    //   Field type: int, unsigned
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.dbg.b' is signed (false).
     */
    public static boolean isSigned_data_dbg_b() {
        return false;
    }

    /**
     * Return whether the field 'data.dbg.b' is an array (false).
     */
    public static boolean isArray_data_dbg_b() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.dbg.b'
     */
    public static int offset_data_dbg_b() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.dbg.b'
     */
    public static int offsetBits_data_dbg_b() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'data.dbg.b'
     */
    public int get_data_dbg_b() {
        return (int)getUIntBEElement(offsetBits_data_dbg_b(), 16);
    }

    /**
     * Set the value of the field 'data.dbg.b'
     */
    public void set_data_dbg_b(int value) {
        setUIntBEElement(offsetBits_data_dbg_b(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.dbg.b'
     */
    public static int size_data_dbg_b() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.dbg.b'
     */
    public static int sizeBits_data_dbg_b() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data.dbg.c
    //   Field type: int, unsigned
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data.dbg.c' is signed (false).
     */
    public static boolean isSigned_data_dbg_c() {
        return false;
    }

    /**
     * Return whether the field 'data.dbg.c' is an array (false).
     */
    public static boolean isArray_data_dbg_c() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data.dbg.c'
     */
    public static int offset_data_dbg_c() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data.dbg.c'
     */
    public static int offsetBits_data_dbg_c() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'data.dbg.c'
     */
    public int get_data_dbg_c() {
        return (int)getUIntBEElement(offsetBits_data_dbg_c(), 16);
    }

    /**
     * Set the value of the field 'data.dbg.c'
     */
    public void set_data_dbg_c(int value) {
        setUIntBEElement(offsetBits_data_dbg_c(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data.dbg.c'
     */
    public static int size_data_dbg_c() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data.dbg.c'
     */
    public static int sizeBits_data_dbg_c() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seqno
    //   Field type: int, unsigned
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seqno' is signed (false).
     */
    public static boolean isSigned_seqno() {
        return false;
    }

    /**
     * Return whether the field 'seqno' is an array (false).
     */
    public static boolean isArray_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seqno'
     */
    public static int offset_seqno() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seqno'
     */
    public static int offsetBits_seqno() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'seqno'
     */
    public int get_seqno() {
        return (int)getUIntBEElement(offsetBits_seqno(), 16);
    }

    /**
     * Set the value of the field 'seqno'
     */
    public void set_seqno(int value) {
        setUIntBEElement(offsetBits_seqno(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seqno'
     */
    public static int size_seqno() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seqno'
     */
    public static int sizeBits_seqno() {
        return 16;
    }

}
