package fi.wsnusbcollect.messages;

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TestSerialMsg'
 * message type.
 */

public class TestSerialMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 10;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 137;

    /** Create a new TestSerialMsg of size 10. */
    public TestSerialMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new TestSerialMsg of the given data_length. */
    public TestSerialMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg with the given data_length
     * and base offset.
     */
    public TestSerialMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg using the given byte array
     * as backing store.
     */
    public TestSerialMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public TestSerialMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TestSerialMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg embedded in the given message
     * at the given base offset.
     */
    public TestSerialMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg embedded in the given message
     * at the given base offset and length.
     */
    public TestSerialMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <TestSerialMsg> \n";
      try {
        s += "  [counter=0x"+Long.toHexString(get_counter())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [received=0x"+Long.toHexString(get_received())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [radioCn=0x"+Long.toHexString(get_radioCn())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [radioOn=0x"+Long.toHexString(get_radioOn())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [radioRecv=0x"+Long.toHexString(get_radioRecv())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [radioSent=0x"+Long.toHexString(get_radioSent())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: counter
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'counter' is signed (false).
     */
    public static boolean isSigned_counter() {
        return false;
    }

    /**
     * Return whether the field 'counter' is an array (false).
     */
    public static boolean isArray_counter() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'counter'
     */
    public static int offset_counter() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'counter'
     */
    public static int offsetBits_counter() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'counter'
     */
    public int get_counter() {
        return (int)getUIntBEElement(offsetBits_counter(), 16);
    }

    /**
     * Set the value of the field 'counter'
     */
    public void set_counter(int value) {
        setUIntBEElement(offsetBits_counter(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'counter'
     */
    public static int size_counter() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'counter'
     */
    public static int sizeBits_counter() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: received
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'received' is signed (false).
     */
    public static boolean isSigned_received() {
        return false;
    }

    /**
     * Return whether the field 'received' is an array (false).
     */
    public static boolean isArray_received() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'received'
     */
    public static int offset_received() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'received'
     */
    public static int offsetBits_received() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'received'
     */
    public int get_received() {
        return (int)getUIntBEElement(offsetBits_received(), 16);
    }

    /**
     * Set the value of the field 'received'
     */
    public void set_received(int value) {
        setUIntBEElement(offsetBits_received(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'received'
     */
    public static int size_received() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'received'
     */
    public static int sizeBits_received() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: radioCn
    //   Field type: short, unsigned
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'radioCn' is signed (false).
     */
    public static boolean isSigned_radioCn() {
        return false;
    }

    /**
     * Return whether the field 'radioCn' is an array (false).
     */
    public static boolean isArray_radioCn() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'radioCn'
     */
    public static int offset_radioCn() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'radioCn'
     */
    public static int offsetBits_radioCn() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'radioCn'
     */
    public short get_radioCn() {
        return (short)getUIntBEElement(offsetBits_radioCn(), 8);
    }

    /**
     * Set the value of the field 'radioCn'
     */
    public void set_radioCn(short value) {
        setUIntBEElement(offsetBits_radioCn(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'radioCn'
     */
    public static int size_radioCn() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'radioCn'
     */
    public static int sizeBits_radioCn() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: radioOn
    //   Field type: short, unsigned
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'radioOn' is signed (false).
     */
    public static boolean isSigned_radioOn() {
        return false;
    }

    /**
     * Return whether the field 'radioOn' is an array (false).
     */
    public static boolean isArray_radioOn() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'radioOn'
     */
    public static int offset_radioOn() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'radioOn'
     */
    public static int offsetBits_radioOn() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'radioOn'
     */
    public short get_radioOn() {
        return (short)getUIntBEElement(offsetBits_radioOn(), 8);
    }

    /**
     * Set the value of the field 'radioOn'
     */
    public void set_radioOn(short value) {
        setUIntBEElement(offsetBits_radioOn(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'radioOn'
     */
    public static int size_radioOn() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'radioOn'
     */
    public static int sizeBits_radioOn() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: radioRecv
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'radioRecv' is signed (false).
     */
    public static boolean isSigned_radioRecv() {
        return false;
    }

    /**
     * Return whether the field 'radioRecv' is an array (false).
     */
    public static boolean isArray_radioRecv() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'radioRecv'
     */
    public static int offset_radioRecv() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'radioRecv'
     */
    public static int offsetBits_radioRecv() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'radioRecv'
     */
    public int get_radioRecv() {
        return (int)getUIntBEElement(offsetBits_radioRecv(), 16);
    }

    /**
     * Set the value of the field 'radioRecv'
     */
    public void set_radioRecv(int value) {
        setUIntBEElement(offsetBits_radioRecv(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'radioRecv'
     */
    public static int size_radioRecv() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'radioRecv'
     */
    public static int sizeBits_radioRecv() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: radioSent
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'radioSent' is signed (false).
     */
    public static boolean isSigned_radioSent() {
        return false;
    }

    /**
     * Return whether the field 'radioSent' is an array (false).
     */
    public static boolean isArray_radioSent() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'radioSent'
     */
    public static int offset_radioSent() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'radioSent'
     */
    public static int offsetBits_radioSent() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'radioSent'
     */
    public int get_radioSent() {
        return (int)getUIntBEElement(offsetBits_radioSent(), 16);
    }

    /**
     * Set the value of the field 'radioSent'
     */
    public void set_radioSent(int value) {
        setUIntBEElement(offsetBits_radioSent(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'radioSent'
     */
    public static int size_radioSent() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'radioSent'
     */
    public static int sizeBits_radioSent() {
        return 16;
    }

}
