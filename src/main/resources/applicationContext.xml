<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
           
    <context:annotation-config />
    <context:component-scan base-package="fi.wsnusbcollect.**" />
    <tx:annotation-driven/>
    <!--<tx:annotation-driven transaction-manager="transactionManager" />-->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>
    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor" />
    
    <!-- 
        Logging
    -->
    <bean id="log4jInitialization" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="org.springframework.util.Log4jConfigurer" />
        <property name="targetMethod" value="initLogging" />
        <property name="arguments">
            <list>
                <value>classpath:log4j.properties</value>
            </list>
        </property>
    </bean>
    
    <bean id="log4jInitializationJLU" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="org.slf4j.bridge.SLF4JBridgeHandler" />
        <property name="targetMethod" value="install" />
    </bean>
        
    <!-- 
        ConfigurationPlaceHolder 
    -->
    <bean id="dbconfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
            <property name="location">
                    <value>classpath:/db.properties</value>
            </property>
    </bean>        
        
    <!-- 
        Data source - local, single connection data source JDBC
    --> 
    <!--
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource"
          p:driverClassName="${db.driver}"
          p:url="${db.url}"
          p:username="${db.user}"
          p:password="${db.password}">       
    </bean>
    -->
    
    <!-- Connection pool -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
      <property name="driverClass"><value>${db.driver}</value></property>
      <property name="jdbcUrl"><value>${db.url}</value></property>
      <property name="user"><value>${db.user}</value></property>
      <property name="password"><value>${db.password}</value></property>
      <property name="acquireIncrement"><value>1</value></property>
      <property name="maxPoolSize"><value>150</value></property>
      <property name="minPoolSize"><value>40</value></property>
      <property name="initialPoolSize"><value>40</value></property>
      <property name="maxAdministrativeTaskTime"><value>0</value></property>
      <property name="idleConnectionTestPeriod"><value>300</value></property>
      <property name="preferredTestQuery"><value>select 1;</value></property>
    </bean>
          
    <!-- JDBC template is separated from JTA/Hibernate here for fast queries -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" >
        <!-- setter for data source -->
        <property name="dataSource" ref="dataSource" />
    </bean>  
        
    <!-- EntityManagerFactory for JPA 2.0 from Spring -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" p:showSql="false" p:generateDdl="true">
                <property name="databasePlatform" value="${db.dialect}" />
            </bean>
        </property>
        <property name="dataSource" ref="dataSource" />
        <property name="persistenceUnitName" value="cards_management_PU"/>
        <property name="loadTimeWeaver">
            <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
        </property>
        <property name="persistenceXmlLocation" value="classpath:/persistence.xml"/>
    </bean>
    
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    
    <!-- HIBERNATE database connection -->
    <bean id="mySessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties" >
            <props>
            <!-- properties chopped for space -->
                <prop key="hibernate.jdbc.batch_size">100</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="hibernate.order_inserts">true</prop>
                <prop key="hibernate.order_updates">true</prop>
                <prop key="hibernate.show_sql">false</prop>
            </props>
            <!--<value>classpath:/db.properties</value>-->
            <!--<list>
                <value>hibernate.dialect=org.hibernate.dialect.MySQL5Dialect</value>
                
            </list>-->
        </property>
        
        <property name="packagesToScan">
            <array>
                <value>fi.wsnusbcollect</value>
            </array>
        </property>
        <property name="annotatedPackages">
            <array>
                <value>fi.wsnusbcollect</value>
            </array>
        </property>
    </bean> 
    
    <bean id="hibernateTransactionManager" 
            class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="mySessionFactory"/>
    </bean>
    
    <!--<value>hibernate.jdbc.batch_size=50</value>-->
    <!--<property name="hibernateProperties">
            <list>
                <value>hibernate.dialect=org.hibernate.dialect.MySQL5Dialect</value>
                
            </list>
        </property>-->
    
    
    
    
    <!--   <tx:annotation-driven />  -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="false" />
    
    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>
    <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" />
    <tx:annotation-driven mode="aspectj" proxy-target-class="true" />
    -->
    
    <bean id="entityManager" class="org.springframework.orm.jpa.support.SharedEntityManagerBean">
       <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    
    
    <!--<context:load-time-weaver/>
     <aop:aspectj-autoproxy />-->
    
    
    
<!--    <bean id="transactionManager"   class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <bean class="org.springframework.transaction.aspectj.AnnotationTransactionAspect" factory-method="aspectOf">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
        <property name="proxyTargetClass" value="true"/>
    </bean>

    <bean class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
        <property name="transactionInterceptor" ref="transactionInterceptor"/>
    </bean>

    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="transactionAttributeSource">
            <bean class="fi.wsnusbcollect.dbManager.CglibOptimizedAnnotationTransactionAttributeSource"/>
        </property>
    </bean>
    -->
    
    <bean id="USBarbitrator" class="fi.wsnusbcollect.usb.USBarbitratorImpl"/>
    <bean id="consoleHelper" class="fi.wsnusbcollect.console.ConsoleHelperImpl"/>
    <bean id="console" class="fi.wsnusbcollect.console.ConsoleImpl"/>
    <bean id="nodeHandlerRegister" class="fi.wsnusbcollect.nodeManager.NodeHandlerRegisterImpl"/>
    
    <!-- Experiment related -->
    <bean id="experimentRecords" class="fi.wsnusbcollect.experiment.ExperimentRecords2DBImpl" scope="prototype"/>
    
    <bean id="experimentParameters" class="fi.wsnusbcollect.experiment.ExperimentParametersImpl"/>
    <bean id="experimentInit" class="fi.wsnusbcollect.experiment.ExperimentInitImpl"/>
    <bean id="experimentCoordinator" class="fi.wsnusbcollect.experiment.ExperimentCoordinatorImpl" lazy-init="true"/>
    <bean id="experimentData2DB" class="fi.wsnusbcollect.experiment.ExperimentData2DBImpl" scope="prototype"/>
    <bean id="experimentStatGen" class="fi.wsnusbcollect.experiment.results.ExperimentStatGenImpl" scope="prototype"/>
    
    <bean id="mailNotifier" class="fi.wsnusbcollect.notify.EventMailNotiffier" />
    
    <bean id="emdonor" class="fi.wsnusbcollect.dbbenchmark.EMdonor" scope="prototype"/>
    <bean id="benchmark" class="fi.wsnusbcollect.dbbenchmark.BenchmarkExecutor" />
</beans>
